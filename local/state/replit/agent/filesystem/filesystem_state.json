{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertClientSchema, insertVendorSchema, insertAccountSchema, insertBankAccountSchema,\n  insertInvoiceSchema, insertInvoiceLineItemSchema, insertBillSchema, insertPurchaseOrderSchema,\n  insertExpenseClaimSchema, insertBankTransactionSchema, insertUserSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Dashboard endpoint\n  app.get(\"/api/dashboard/metrics\", async (req, res) => {\n    try {\n      const metrics = await storage.getDashboardMetrics();\n      res.json(metrics);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching dashboard metrics: \" + error.message });\n    }\n  });\n\n  // Users endpoints\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      res.json(user);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Error creating user: \" + error.message });\n    }\n  });\n\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching user: \" + error.message });\n    }\n  });\n\n  // Clients endpoints\n  app.get(\"/api/clients\", async (req, res) => {\n    try {\n      const clients = await storage.getClients();\n      res.json(clients);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching clients: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/clients\", async (req, res) => {\n    try {\n      const clientData = insertClientSchema.parse(req.body);\n      const client = await storage.createClient(clientData);\n      res.json(client);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Error creating client: \" + error.message });\n    }\n  });\n\n  app.get(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const client = await storage.getClient(req.params.id);\n      if (!client) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json(client);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching client: \" + error.message });\n    }\n  });\n\n  app.put(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const clientData = insertClientSchema.partial().parse(req.body);\n      const client = await storage.updateClient(req.params.id, clientData);\n      res.json(client);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Error updating client: \" + error.message });\n    }\n  });\n\n  app.delete(\"/api/clients/:id\", async (req, res) => {\n    try {\n      await storage.deleteClient(req.params.id);\n      res.json({ message: \"Client deleted successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error deleting client: \" + error.message });\n    }\n  });\n\n  // Vendors endpoints\n  app.get(\"/api/vendors\", async (req, res) => {\n    try {\n      const vendors = await storage.getVendors();\n      res.json(vendors);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching vendors: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/vendors\", async (req, res) => {\n    try {\n      const vendorData = insertVendorSchema.parse(req.body);\n      const vendor = await storage.createVendor(vendorData);\n      res.json(vendor);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Error creating vendor: \" + error.message });\n    }\n  });\n\n  app.get(\"/api/vendors/:id\", async (req, res) => {\n    try {\n      const vendor = await storage.getVendor(req.params.id);\n      if (!vendor) {\n        return res.status(404).json({ message: \"Vendor not found\" });\n      }\n      res.json(vendor);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching vendor: \" + error.message });\n    }\n  });\n\n  app.put(\"/api/vendors/:id\", async (req, res) => {\n    try {\n      const vendorData = insertVendorSchema.partial().parse(req.body);\n      const vendor = await storage.updateVendor(req.params.id, vendorData);\n      res.json(vendor);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Error updating vendor: \" + error.message });\n    }\n  });\n\n  app.delete(\"/api/vendors/:id\", async (req, res) => {\n    try {\n      await storage.deleteVendor(req.params.id);\n      res.json({ message: \"Vendor deleted successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error deleting vendor: \" + error.message });\n    }\n  });\n\n  // Accounts endpoints\n  app.get(\"/api/accounts\", async (req, res) => {\n    try {\n      const accounts = await storage.getAccounts();\n      res.json(accounts);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching accounts: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/accounts\", async (req, res) => {\n    try {\n      const accountData = insertAccountSchema.parse(req.body);\n      const account = await storage.createAccount(accountData);\n      res.json(account);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Error creating account: \" + error.message });\n    }\n  });\n\n  app.get(\"/api/accounts/:id\", async (req, res) => {\n    try {\n      const account = await storage.getAccount(req.params.id);\n      if (!account) {\n        return res.status(404).json({ message: \"Account not found\" });\n      }\n      res.json(account);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching account: \" + error.message });\n    }\n  });\n\n  app.put(\"/api/accounts/:id\", async (req, res) => {\n    try {\n      const accountData = insertAccountSchema.partial().parse(req.body);\n      const account = await storage.updateAccount(req.params.id, accountData);\n      res.json(account);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Error updating account: \" + error.message });\n    }\n  });\n\n  // Bank Accounts endpoints\n  app.get(\"/api/bank-accounts\", async (req, res) => {\n    try {\n      const bankAccounts = await storage.getBankAccounts();\n      res.json(bankAccounts);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching bank accounts: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/bank-accounts\", async (req, res) => {\n    try {\n      const bankAccountData = insertBankAccountSchema.parse(req.body);\n      const bankAccount = await storage.createBankAccount(bankAccountData);\n      res.json(bankAccount);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Error creating bank account: \" + error.message });\n    }\n  });\n\n  // Invoices endpoints\n  app.get(\"/api/invoices\", async (req, res) => {\n    try {\n      const invoices = await storage.getInvoices();\n      res.json(invoices);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching invoices: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/invoices\", async (req, res) => {\n    try {\n      const { lineItems, ...invoiceData } = req.body;\n      const validatedInvoice = insertInvoiceSchema.parse(invoiceData);\n      const validatedLineItems = z.array(insertInvoiceLineItemSchema).parse(lineItems || []);\n      \n      const invoice = await storage.createInvoice(validatedInvoice, validatedLineItems);\n      res.json(invoice);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Error creating invoice: \" + error.message });\n    }\n  });\n\n  app.get(\"/api/invoices/:id\", async (req, res) => {\n    try {\n      const invoice = await storage.getInvoice(req.params.id);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      res.json(invoice);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching invoice: \" + error.message });\n    }\n  });\n\n  app.put(\"/api/invoices/:id\", async (req, res) => {\n    try {\n      const invoiceData = insertInvoiceSchema.partial().parse(req.body);\n      const invoice = await storage.updateInvoice(req.params.id, invoiceData);\n      res.json(invoice);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Error updating invoice: \" + error.message });\n    }\n  });\n\n  app.delete(\"/api/invoices/:id\", async (req, res) => {\n    try {\n      await storage.deleteInvoice(req.params.id);\n      res.json({ message: \"Invoice deleted successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error deleting invoice: \" + error.message });\n    }\n  });\n\n  // Bills endpoints\n  app.get(\"/api/bills\", async (req, res) => {\n    try {\n      const bills = await storage.getBills();\n      res.json(bills);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching bills: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/bills\", async (req, res) => {\n    try {\n      const billData = insertBillSchema.parse(req.body);\n      const bill = await storage.createBill(billData);\n      res.json(bill);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Error creating bill: \" + error.message });\n    }\n  });\n\n  // Purchase Orders endpoints\n  app.get(\"/api/purchase-orders\", async (req, res) => {\n    try {\n      const purchaseOrders = await storage.getPurchaseOrders();\n      res.json(purchaseOrders);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching purchase orders: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/purchase-orders\", async (req, res) => {\n    try {\n      const poData = insertPurchaseOrderSchema.parse(req.body);\n      const purchaseOrder = await storage.createPurchaseOrder(poData);\n      res.json(purchaseOrder);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Error creating purchase order: \" + error.message });\n    }\n  });\n\n  // Expense Claims endpoints\n  app.get(\"/api/expense-claims\", async (req, res) => {\n    try {\n      const expenseClaims = await storage.getExpenseClaims();\n      res.json(expenseClaims);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching expense claims: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/expense-claims\", async (req, res) => {\n    try {\n      const claimData = insertExpenseClaimSchema.parse(req.body);\n      const expenseClaim = await storage.createExpenseClaim(claimData);\n      res.json(expenseClaim);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Error creating expense claim: \" + error.message });\n    }\n  });\n\n  app.put(\"/api/expense-claims/:id/approve\", async (req, res) => {\n    try {\n      const { approverId } = req.body;\n      if (!approverId) {\n        return res.status(400).json({ message: \"Approver ID is required\" });\n      }\n      const expenseClaim = await storage.approveExpenseClaim(req.params.id, approverId);\n      res.json(expenseClaim);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Error approving expense claim: \" + error.message });\n    }\n  });\n\n  // Bank Transactions endpoints\n  app.get(\"/api/bank-transactions\", async (req, res) => {\n    try {\n      const bankAccountId = req.query.bankAccountId as string;\n      const transactions = await storage.getBankTransactions(bankAccountId);\n      res.json(transactions);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error fetching bank transactions: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/bank-transactions\", async (req, res) => {\n    try {\n      const transactionData = insertBankTransactionSchema.parse(req.body);\n      const transaction = await storage.createBankTransaction(transactionData);\n      res.json(transaction);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Error creating bank transaction: \" + error.message });\n    }\n  });\n\n  app.put(\"/api/bank-transactions/:id/reconcile\", async (req, res) => {\n    try {\n      const transaction = await storage.reconcileTransaction(req.params.id);\n      res.json(transaction);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Error reconciling transaction: \" + error.message });\n    }\n  });\n\n  // Reports endpoints\n  app.get(\"/api/reports/profit-loss\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n      const report = await storage.getProfitLossReport(startDate as string, endDate as string);\n      res.json(report);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error generating P&L report: \" + error.message });\n    }\n  });\n\n  app.get(\"/api/reports/balance-sheet\", async (req, res) => {\n    try {\n      const { date } = req.query;\n      if (!date) {\n        return res.status(400).json({ message: \"Date is required\" });\n      }\n      const report = await storage.getBalanceSheetReport(date as string);\n      res.json(report);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error generating balance sheet: \" + error.message });\n    }\n  });\n\n  app.get(\"/api/reports/cash-flow\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n      const report = await storage.getCashFlowReport(startDate as string, endDate as string);\n      res.json(report);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error generating cash flow report: \" + error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13772},"server/storage.ts":{"content":"import {\n  users, clients, vendors, accounts, bankAccounts, invoices, invoiceLineItems,\n  bills, purchaseOrders, expenseClaims, bankTransactions, journalEntries, journalEntryLineItems,\n  type User, type InsertUser, type Client, type InsertClient, type Vendor, type InsertVendor,\n  type Account, type InsertAccount, type BankAccount, type InsertBankAccount,\n  type Invoice, type InsertInvoice, type InvoiceLineItem, type InsertInvoiceLineItem,\n  type Bill, type InsertBill, type PurchaseOrder, type InsertPurchaseOrder,\n  type ExpenseClaim, type InsertExpenseClaim, type BankTransaction, type InsertBankTransaction,\n  type JournalEntry, type InsertJournalEntry, type JournalEntryLineItem, type InsertJournalEntryLineItem\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, lte, sql, sum, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Clients\n  getClients(): Promise<Client[]>;\n  getClient(id: string): Promise<Client | undefined>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: string, client: Partial<InsertClient>): Promise<Client>;\n  deleteClient(id: string): Promise<void>;\n\n  // Vendors\n  getVendors(): Promise<Vendor[]>;\n  getVendor(id: string): Promise<Vendor | undefined>;\n  createVendor(vendor: InsertVendor): Promise<Vendor>;\n  updateVendor(id: string, vendor: Partial<InsertVendor>): Promise<Vendor>;\n  deleteVendor(id: string): Promise<void>;\n\n  // Accounts\n  getAccounts(): Promise<Account[]>;\n  getAccount(id: string): Promise<Account | undefined>;\n  createAccount(account: InsertAccount): Promise<Account>;\n  updateAccount(id: string, account: Partial<InsertAccount>): Promise<Account>;\n  deleteAccount(id: string): Promise<void>;\n\n  // Bank Accounts\n  getBankAccounts(): Promise<BankAccount[]>;\n  getBankAccount(id: string): Promise<BankAccount | undefined>;\n  createBankAccount(bankAccount: InsertBankAccount): Promise<BankAccount>;\n  updateBankAccount(id: string, bankAccount: Partial<InsertBankAccount>): Promise<BankAccount>;\n\n  // Invoices\n  getInvoices(): Promise<(Invoice & { client: Client; lineItems: InvoiceLineItem[] })[]>;\n  getInvoice(id: string): Promise<(Invoice & { client: Client; lineItems: InvoiceLineItem[] }) | undefined>;\n  createInvoice(invoice: InsertInvoice, lineItems: InsertInvoiceLineItem[]): Promise<Invoice>;\n  updateInvoice(id: string, invoice: Partial<InsertInvoice>): Promise<Invoice>;\n  deleteInvoice(id: string): Promise<void>;\n\n  // Bills\n  getBills(): Promise<(Bill & { vendor: Vendor })[]>;\n  getBill(id: string): Promise<(Bill & { vendor: Vendor }) | undefined>;\n  createBill(bill: InsertBill): Promise<Bill>;\n  updateBill(id: string, bill: Partial<InsertBill>): Promise<Bill>;\n\n  // Purchase Orders\n  getPurchaseOrders(): Promise<(PurchaseOrder & { vendor: Vendor })[]>;\n  getPurchaseOrder(id: string): Promise<(PurchaseOrder & { vendor: Vendor }) | undefined>;\n  createPurchaseOrder(purchaseOrder: InsertPurchaseOrder): Promise<PurchaseOrder>;\n  updatePurchaseOrder(id: string, purchaseOrder: Partial<InsertPurchaseOrder>): Promise<PurchaseOrder>;\n\n  // Expense Claims\n  getExpenseClaims(): Promise<(ExpenseClaim & { user: User; account?: Account })[]>;\n  getExpenseClaim(id: string): Promise<(ExpenseClaim & { user: User; account?: Account }) | undefined>;\n  createExpenseClaim(expenseClaim: InsertExpenseClaim): Promise<ExpenseClaim>;\n  updateExpenseClaim(id: string, expenseClaim: Partial<InsertExpenseClaim>): Promise<ExpenseClaim>;\n  approveExpenseClaim(id: string, approverId: string): Promise<ExpenseClaim>;\n\n  // Bank Transactions\n  getBankTransactions(bankAccountId?: string): Promise<(BankTransaction & { bankAccount: BankAccount })[]>;\n  getBankTransaction(id: string): Promise<BankTransaction | undefined>;\n  createBankTransaction(transaction: InsertBankTransaction): Promise<BankTransaction>;\n  updateBankTransaction(id: string, transaction: Partial<InsertBankTransaction>): Promise<BankTransaction>;\n  reconcileTransaction(id: string): Promise<BankTransaction>;\n\n  // Dashboard Metrics\n  getDashboardMetrics(): Promise<{\n    totalRevenue: string;\n    outstandingInvoices: string;\n    cashBalance: string;\n    monthlyExpenses: string;\n    revenueGrowth: string;\n    overdueInvoicesCount: number;\n    bankAccountsCount: number;\n    expenseGrowth: string;\n  }>;\n\n  // Financial Reports\n  getProfitLossReport(startDate: string, endDate: string): Promise<any>;\n  getBalanceSheetReport(date: string): Promise<any>;\n  getCashFlowReport(startDate: string, endDate: string): Promise<any>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  // Clients\n  async getClients(): Promise<Client[]> {\n    return await db.select().from(clients).where(eq(clients.isActive, true)).orderBy(clients.name);\n  }\n\n  async getClient(id: string): Promise<Client | undefined> {\n    const [client] = await db.select().from(clients).where(eq(clients.id, id));\n    return client || undefined;\n  }\n\n  async createClient(insertClient: InsertClient): Promise<Client> {\n    const [client] = await db.insert(clients).values(insertClient).returning();\n    return client;\n  }\n\n  async updateClient(id: string, updateClient: Partial<InsertClient>): Promise<Client> {\n    const [client] = await db.update(clients).set(updateClient).where(eq(clients.id, id)).returning();\n    return client;\n  }\n\n  async deleteClient(id: string): Promise<void> {\n    await db.update(clients).set({ isActive: false }).where(eq(clients.id, id));\n  }\n\n  // Vendors\n  async getVendors(): Promise<Vendor[]> {\n    return await db.select().from(vendors).where(eq(vendors.isActive, true)).orderBy(vendors.name);\n  }\n\n  async getVendor(id: string): Promise<Vendor | undefined> {\n    const [vendor] = await db.select().from(vendors).where(eq(vendors.id, id));\n    return vendor || undefined;\n  }\n\n  async createVendor(insertVendor: InsertVendor): Promise<Vendor> {\n    const [vendor] = await db.insert(vendors).values(insertVendor).returning();\n    return vendor;\n  }\n\n  async updateVendor(id: string, updateVendor: Partial<InsertVendor>): Promise<Vendor> {\n    const [vendor] = await db.update(vendors).set(updateVendor).where(eq(vendors.id, id)).returning();\n    return vendor;\n  }\n\n  async deleteVendor(id: string): Promise<void> {\n    await db.update(vendors).set({ isActive: false }).where(eq(vendors.id, id));\n  }\n\n  // Accounts\n  async getAccounts(): Promise<Account[]> {\n    return await db.select().from(accounts).where(eq(accounts.isActive, true)).orderBy(accounts.code);\n  }\n\n  async getAccount(id: string): Promise<Account | undefined> {\n    const [account] = await db.select().from(accounts).where(eq(accounts.id, id));\n    return account || undefined;\n  }\n\n  async createAccount(insertAccount: InsertAccount): Promise<Account> {\n    const [account] = await db.insert(accounts).values(insertAccount).returning();\n    return account;\n  }\n\n  async updateAccount(id: string, updateAccount: Partial<InsertAccount>): Promise<Account> {\n    const [account] = await db.update(accounts).set(updateAccount).where(eq(accounts.id, id)).returning();\n    return account;\n  }\n\n  async deleteAccount(id: string): Promise<void> {\n    await db.update(accounts).set({ isActive: false }).where(eq(accounts.id, id));\n  }\n\n  // Bank Accounts\n  async getBankAccounts(): Promise<BankAccount[]> {\n    return await db.select().from(bankAccounts).where(eq(bankAccounts.isActive, true)).orderBy(bankAccounts.name);\n  }\n\n  async getBankAccount(id: string): Promise<BankAccount | undefined> {\n    const [bankAccount] = await db.select().from(bankAccounts).where(eq(bankAccounts.id, id));\n    return bankAccount || undefined;\n  }\n\n  async createBankAccount(insertBankAccount: InsertBankAccount): Promise<BankAccount> {\n    const [bankAccount] = await db.insert(bankAccounts).values(insertBankAccount).returning();\n    return bankAccount;\n  }\n\n  async updateBankAccount(id: string, updateBankAccount: Partial<InsertBankAccount>): Promise<BankAccount> {\n    const [bankAccount] = await db.update(bankAccounts).set(updateBankAccount).where(eq(bankAccounts.id, id)).returning();\n    return bankAccount;\n  }\n\n  // Invoices\n  async getInvoices(): Promise<(Invoice & { client: Client; lineItems: InvoiceLineItem[] })[]> {\n    const invoicesWithClients = await db\n      .select()\n      .from(invoices)\n      .leftJoin(clients, eq(invoices.clientId, clients.id))\n      .orderBy(desc(invoices.createdAt));\n\n    const result = [];\n    for (const { invoices: invoice, clients: client } of invoicesWithClients) {\n      const lineItems = await db\n        .select()\n        .from(invoiceLineItems)\n        .where(eq(invoiceLineItems.invoiceId, invoice.id));\n\n      result.push({\n        ...invoice,\n        client: client!,\n        lineItems,\n      });\n    }\n\n    return result;\n  }\n\n  async getInvoice(id: string): Promise<(Invoice & { client: Client; lineItems: InvoiceLineItem[] }) | undefined> {\n    const [invoiceWithClient] = await db\n      .select()\n      .from(invoices)\n      .leftJoin(clients, eq(invoices.clientId, clients.id))\n      .where(eq(invoices.id, id));\n\n    if (!invoiceWithClient) return undefined;\n\n    const lineItems = await db\n      .select()\n      .from(invoiceLineItems)\n      .where(eq(invoiceLineItems.invoiceId, id));\n\n    return {\n      ...invoiceWithClient.invoices,\n      client: invoiceWithClient.clients!,\n      lineItems,\n    };\n  }\n\n  async createInvoice(insertInvoice: InsertInvoice, lineItems: InsertInvoiceLineItem[]): Promise<Invoice> {\n    const [invoice] = await db.insert(invoices).values(insertInvoice).returning();\n    \n    if (lineItems.length > 0) {\n      const lineItemsWithInvoiceId = lineItems.map(item => ({\n        ...item,\n        invoiceId: invoice.id,\n      }));\n      await db.insert(invoiceLineItems).values(lineItemsWithInvoiceId);\n    }\n\n    return invoice;\n  }\n\n  async updateInvoice(id: string, updateInvoice: Partial<InsertInvoice>): Promise<Invoice> {\n    const [invoice] = await db.update(invoices).set(updateInvoice).where(eq(invoices.id, id)).returning();\n    return invoice;\n  }\n\n  async deleteInvoice(id: string): Promise<void> {\n    await db.delete(invoiceLineItems).where(eq(invoiceLineItems.invoiceId, id));\n    await db.delete(invoices).where(eq(invoices.id, id));\n  }\n\n  // Bills\n  async getBills(): Promise<(Bill & { vendor: Vendor })[]> {\n    const billsWithVendors = await db\n      .select()\n      .from(bills)\n      .leftJoin(vendors, eq(bills.vendorId, vendors.id))\n      .orderBy(desc(bills.createdAt));\n\n    return billsWithVendors.map(({ bills: bill, vendors: vendor }) => ({\n      ...bill,\n      vendor: vendor!,\n    }));\n  }\n\n  async getBill(id: string): Promise<(Bill & { vendor: Vendor }) | undefined> {\n    const [billWithVendor] = await db\n      .select()\n      .from(bills)\n      .leftJoin(vendors, eq(bills.vendorId, vendors.id))\n      .where(eq(bills.id, id));\n\n    if (!billWithVendor) return undefined;\n\n    return {\n      ...billWithVendor.bills,\n      vendor: billWithVendor.vendors!,\n    };\n  }\n\n  async createBill(insertBill: InsertBill): Promise<Bill> {\n    const [bill] = await db.insert(bills).values(insertBill).returning();\n    return bill;\n  }\n\n  async updateBill(id: string, updateBill: Partial<InsertBill>): Promise<Bill> {\n    const [bill] = await db.update(bills).set(updateBill).where(eq(bills.id, id)).returning();\n    return bill;\n  }\n\n  // Purchase Orders\n  async getPurchaseOrders(): Promise<(PurchaseOrder & { vendor: Vendor })[]> {\n    const posWithVendors = await db\n      .select()\n      .from(purchaseOrders)\n      .leftJoin(vendors, eq(purchaseOrders.vendorId, vendors.id))\n      .orderBy(desc(purchaseOrders.createdAt));\n\n    return posWithVendors.map(({ purchase_orders: po, vendors: vendor }) => ({\n      ...po,\n      vendor: vendor!,\n    }));\n  }\n\n  async getPurchaseOrder(id: string): Promise<(PurchaseOrder & { vendor: Vendor }) | undefined> {\n    const [poWithVendor] = await db\n      .select()\n      .from(purchaseOrders)\n      .leftJoin(vendors, eq(purchaseOrders.vendorId, vendors.id))\n      .where(eq(purchaseOrders.id, id));\n\n    if (!poWithVendor) return undefined;\n\n    return {\n      ...poWithVendor.purchase_orders,\n      vendor: poWithVendor.vendors!,\n    };\n  }\n\n  async createPurchaseOrder(insertPO: InsertPurchaseOrder): Promise<PurchaseOrder> {\n    const [po] = await db.insert(purchaseOrders).values(insertPO).returning();\n    return po;\n  }\n\n  async updatePurchaseOrder(id: string, updatePO: Partial<InsertPurchaseOrder>): Promise<PurchaseOrder> {\n    const [po] = await db.update(purchaseOrders).set(updatePO).where(eq(purchaseOrders.id, id)).returning();\n    return po;\n  }\n\n  // Expense Claims\n  async getExpenseClaims(): Promise<(ExpenseClaim & { user: User; account?: Account })[]> {\n    const claimsWithUsers = await db\n      .select()\n      .from(expenseClaims)\n      .leftJoin(users, eq(expenseClaims.userId, users.id))\n      .leftJoin(accounts, eq(expenseClaims.accountId, accounts.id))\n      .orderBy(desc(expenseClaims.createdAt));\n\n    return claimsWithUsers.map(({ expense_claims: claim, users: user, accounts: account }) => ({\n      ...claim,\n      user: user!,\n      account: account || undefined,\n    }));\n  }\n\n  async getExpenseClaim(id: string): Promise<(ExpenseClaim & { user: User; account?: Account }) | undefined> {\n    const [claimWithUser] = await db\n      .select()\n      .from(expenseClaims)\n      .leftJoin(users, eq(expenseClaims.userId, users.id))\n      .leftJoin(accounts, eq(expenseClaims.accountId, accounts.id))\n      .where(eq(expenseClaims.id, id));\n\n    if (!claimWithUser) return undefined;\n\n    return {\n      ...claimWithUser.expense_claims,\n      user: claimWithUser.users!,\n      account: claimWithUser.accounts || undefined,\n    };\n  }\n\n  async createExpenseClaim(insertClaim: InsertExpenseClaim): Promise<ExpenseClaim> {\n    const [claim] = await db.insert(expenseClaims).values(insertClaim).returning();\n    return claim;\n  }\n\n  async updateExpenseClaim(id: string, updateClaim: Partial<InsertExpenseClaim>): Promise<ExpenseClaim> {\n    const [claim] = await db.update(expenseClaims).set(updateClaim).where(eq(expenseClaims.id, id)).returning();\n    return claim;\n  }\n\n  async approveExpenseClaim(id: string, approverId: string): Promise<ExpenseClaim> {\n    const [claim] = await db\n      .update(expenseClaims)\n      .set({\n        status: \"approved\",\n        approvedBy: approverId,\n        approvedAt: new Date(),\n      })\n      .where(eq(expenseClaims.id, id))\n      .returning();\n    return claim;\n  }\n\n  // Bank Transactions\n  async getBankTransactions(bankAccountId?: string): Promise<(BankTransaction & { bankAccount: BankAccount })[]> {\n    let query = db\n      .select()\n      .from(bankTransactions)\n      .leftJoin(bankAccounts, eq(bankTransactions.bankAccountId, bankAccounts.id));\n\n    if (bankAccountId) {\n      query = query.where(eq(bankTransactions.bankAccountId, bankAccountId));\n    }\n\n    const transactionsWithAccounts = await query.orderBy(desc(bankTransactions.transactionDate));\n\n    return transactionsWithAccounts.map(({ bank_transactions: transaction, bank_accounts: account }) => ({\n      ...transaction,\n      bankAccount: account!,\n    }));\n  }\n\n  async getBankTransaction(id: string): Promise<BankTransaction | undefined> {\n    const [transaction] = await db.select().from(bankTransactions).where(eq(bankTransactions.id, id));\n    return transaction || undefined;\n  }\n\n  async createBankTransaction(insertTransaction: InsertBankTransaction): Promise<BankTransaction> {\n    const [transaction] = await db.insert(bankTransactions).values(insertTransaction).returning();\n    return transaction;\n  }\n\n  async updateBankTransaction(id: string, updateTransaction: Partial<InsertBankTransaction>): Promise<BankTransaction> {\n    const [transaction] = await db\n      .update(bankTransactions)\n      .set(updateTransaction)\n      .where(eq(bankTransactions.id, id))\n      .returning();\n    return transaction;\n  }\n\n  async reconcileTransaction(id: string): Promise<BankTransaction> {\n    const [transaction] = await db\n      .update(bankTransactions)\n      .set({\n        isReconciled: true,\n        reconciledAt: new Date(),\n      })\n      .where(eq(bankTransactions.id, id))\n      .returning();\n    return transaction;\n  }\n\n  // Dashboard Metrics\n  async getDashboardMetrics(): Promise<{\n    totalRevenue: string;\n    outstandingInvoices: string;\n    cashBalance: string;\n    monthlyExpenses: string;\n    revenueGrowth: string;\n    overdueInvoicesCount: number;\n    bankAccountsCount: number;\n    expenseGrowth: string;\n  }> {\n    // Total Revenue (paid invoices)\n    const [revenueResult] = await db\n      .select({ total: sum(invoices.paidAmount) })\n      .from(invoices)\n      .where(eq(invoices.status, \"paid\"));\n\n    // Outstanding Invoices\n    const [outstandingResult] = await db\n      .select({ total: sum(sql`${invoices.totalAmount} - ${invoices.paidAmount}`) })\n      .from(invoices)\n      .where(sql`${invoices.status} IN ('sent', 'overdue')`);\n\n    // Cash Balance (sum of all bank accounts)\n    const [cashResult] = await db\n      .select({ total: sum(bankAccounts.balance) })\n      .from(bankAccounts)\n      .where(eq(bankAccounts.isActive, true));\n\n    // Overdue invoices count\n    const [overdueResult] = await db\n      .select({ count: count() })\n      .from(invoices)\n      .where(and(\n        eq(invoices.status, \"overdue\"),\n        sql`${invoices.dueDate} < CURRENT_DATE`\n      ));\n\n    // Bank accounts count\n    const [bankAccountsResult] = await db\n      .select({ count: count() })\n      .from(bankAccounts)\n      .where(eq(bankAccounts.isActive, true));\n\n    // Monthly expenses (current month)\n    const currentMonth = new Date();\n    currentMonth.setDate(1);\n    const nextMonth = new Date(currentMonth);\n    nextMonth.setMonth(nextMonth.getMonth() + 1);\n\n    const [expensesResult] = await db\n      .select({ total: sum(expenseClaims.amount) })\n      .from(expenseClaims)\n      .where(and(\n        gte(expenseClaims.expenseDate, currentMonth.toISOString().split('T')[0]),\n        sql`${expenseClaims.expenseDate} < ${nextMonth.toISOString().split('T')[0]}`\n      ));\n\n    return {\n      totalRevenue: (revenueResult?.total || \"0\"),\n      outstandingInvoices: (outstandingResult?.total || \"0\"),\n      cashBalance: (cashResult?.total || \"0\"),\n      monthlyExpenses: (expensesResult?.total || \"0\"),\n      revenueGrowth: \"12.3\", // Placeholder - would need historical data\n      overdueInvoicesCount: Number(overdueResult?.count || 0),\n      bankAccountsCount: Number(bankAccountsResult?.count || 0),\n      expenseGrowth: \"5.2\", // Placeholder - would need historical data\n    };\n  }\n\n  // Financial Reports (simplified implementations)\n  async getProfitLossReport(startDate: string, endDate: string): Promise<any> {\n    // This would be a complex query involving revenue and expense accounts\n    return { message: \"P&L report functionality to be implemented\" };\n  }\n\n  async getBalanceSheetReport(date: string): Promise<any> {\n    // This would show assets, liabilities, and equity as of a specific date\n    return { message: \"Balance sheet report functionality to be implemented\" };\n  }\n\n  async getCashFlowReport(startDate: string, endDate: string): Promise<any> {\n    // This would show cash flow from operations, investing, and financing\n    return { message: \"Cash flow report functionality to be implemented\" };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":20299},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, timestamp, integer, boolean, jsonb, date } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  companyName: text(\"company_name\"),\n  role: text(\"role\").notNull().default(\"user\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Clients table\nexport const clients = pgTable(\"clients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  address: text(\"address\"),\n  city: text(\"city\"),\n  state: text(\"state\"),\n  zipCode: text(\"zip_code\"),\n  country: text(\"country\"),\n  taxId: text(\"tax_id\"),\n  paymentTerms: integer(\"payment_terms\").default(30),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Vendors table\nexport const vendors = pgTable(\"vendors\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  address: text(\"address\"),\n  city: text(\"city\"),\n  state: text(\"state\"),\n  zipCode: text(\"zip_code\"),\n  country: text(\"country\"),\n  taxId: text(\"tax_id\"),\n  paymentTerms: integer(\"payment_terms\").default(30),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Chart of Accounts\nexport const accounts = pgTable(\"accounts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // asset, liability, equity, revenue, expense\n  subType: text(\"sub_type\"), // current_asset, fixed_asset, etc.\n  parentId: varchar(\"parent_id\"),\n  isActive: boolean(\"is_active\").default(true),\n  description: text(\"description\"),\n  balance: decimal(\"balance\", { precision: 12, scale: 2 }).default(\"0.00\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Bank Accounts\nexport const bankAccounts = pgTable(\"bank_accounts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  accountNumber: text(\"account_number\"),\n  bankName: text(\"bank_name\"),\n  accountType: text(\"account_type\"), // checking, savings, credit_card\n  balance: decimal(\"balance\", { precision: 12, scale: 2 }).default(\"0.00\"),\n  isActive: boolean(\"is_active\").default(true),\n  accountId: varchar(\"account_id\").references(() => accounts.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Invoices\nexport const invoices = pgTable(\"invoices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceNumber: text(\"invoice_number\").notNull().unique(),\n  clientId: varchar(\"client_id\").notNull().references(() => clients.id),\n  issueDate: date(\"issue_date\").notNull(),\n  dueDate: date(\"due_date\").notNull(),\n  status: text(\"status\").notNull().default(\"draft\"), // draft, sent, paid, overdue, cancelled\n  subtotal: decimal(\"subtotal\", { precision: 12, scale: 2 }).notNull(),\n  taxAmount: decimal(\"tax_amount\", { precision: 12, scale: 2 }).default(\"0.00\"),\n  totalAmount: decimal(\"total_amount\", { precision: 12, scale: 2 }).notNull(),\n  paidAmount: decimal(\"paid_amount\", { precision: 12, scale: 2 }).default(\"0.00\"),\n  notes: text(\"notes\"),\n  terms: text(\"terms\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Invoice Line Items\nexport const invoiceLineItems = pgTable(\"invoice_line_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceId: varchar(\"invoice_id\").notNull().references(() => invoices.id, { onDelete: \"cascade\" }),\n  description: text(\"description\").notNull(),\n  quantity: decimal(\"quantity\", { precision: 10, scale: 2 }).notNull(),\n  rate: decimal(\"rate\", { precision: 12, scale: 2 }).notNull(),\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  accountId: varchar(\"account_id\").references(() => accounts.id),\n});\n\n// Bills (Accounts Payable)\nexport const bills = pgTable(\"bills\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  billNumber: text(\"bill_number\"),\n  vendorId: varchar(\"vendor_id\").notNull().references(() => vendors.id),\n  issueDate: date(\"issue_date\").notNull(),\n  dueDate: date(\"due_date\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, paid, overdue\n  subtotal: decimal(\"subtotal\", { precision: 12, scale: 2 }).notNull(),\n  taxAmount: decimal(\"tax_amount\", { precision: 12, scale: 2 }).default(\"0.00\"),\n  totalAmount: decimal(\"total_amount\", { precision: 12, scale: 2 }).notNull(),\n  paidAmount: decimal(\"paid_amount\", { precision: 12, scale: 2 }).default(\"0.00\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Purchase Orders\nexport const purchaseOrders = pgTable(\"purchase_orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  poNumber: text(\"po_number\").notNull().unique(),\n  vendorId: varchar(\"vendor_id\").notNull().references(() => vendors.id),\n  orderDate: date(\"order_date\").notNull(),\n  expectedDate: date(\"expected_date\"),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, received, cancelled\n  subtotal: decimal(\"subtotal\", { precision: 12, scale: 2 }).notNull(),\n  taxAmount: decimal(\"tax_amount\", { precision: 12, scale: 2 }).default(\"0.00\"),\n  totalAmount: decimal(\"total_amount\", { precision: 12, scale: 2 }).notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Expense Claims\nexport const expenseClaims = pgTable(\"expense_claims\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  claimNumber: text(\"claim_number\").notNull().unique(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  description: text(\"description\").notNull(),\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  expenseDate: date(\"expense_date\").notNull(),\n  status: text(\"status\").notNull().default(\"submitted\"), // submitted, approved, rejected, paid\n  category: text(\"category\"), // travel, meals, office_supplies, etc.\n  accountId: varchar(\"account_id\").references(() => accounts.id),\n  receiptUrl: text(\"receipt_url\"),\n  notes: text(\"notes\"),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Bank Transactions\nexport const bankTransactions = pgTable(\"bank_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bankAccountId: varchar(\"bank_account_id\").notNull().references(() => bankAccounts.id),\n  transactionDate: date(\"transaction_date\").notNull(),\n  description: text(\"description\").notNull(),\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  type: text(\"type\").notNull(), // debit, credit\n  balance: decimal(\"balance\", { precision: 12, scale: 2 }),\n  isReconciled: boolean(\"is_reconciled\").default(false),\n  reconciledAt: timestamp(\"reconciled_at\"),\n  matchedTransactionId: varchar(\"matched_transaction_id\"),\n  importedFrom: text(\"imported_from\"), // csv, api, manual\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Journal Entries (for double-entry bookkeeping)\nexport const journalEntries = pgTable(\"journal_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  entryNumber: text(\"entry_number\").notNull().unique(),\n  entryDate: date(\"entry_date\").notNull(),\n  description: text(\"description\").notNull(),\n  reference: text(\"reference\"), // invoice number, bill number, etc.\n  totalAmount: decimal(\"total_amount\", { precision: 12, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"posted\"), // draft, posted\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Journal Entry Line Items\nexport const journalEntryLineItems = pgTable(\"journal_entry_line_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  journalEntryId: varchar(\"journal_entry_id\").notNull().references(() => journalEntries.id, { onDelete: \"cascade\" }),\n  accountId: varchar(\"account_id\").notNull().references(() => accounts.id),\n  description: text(\"description\"),\n  debitAmount: decimal(\"debit_amount\", { precision: 12, scale: 2 }).default(\"0.00\"),\n  creditAmount: decimal(\"credit_amount\", { precision: 12, scale: 2 }).default(\"0.00\"),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  expenseClaims: many(expenseClaims),\n}));\n\nexport const clientsRelations = relations(clients, ({ many }) => ({\n  invoices: many(invoices),\n}));\n\nexport const vendorsRelations = relations(vendors, ({ many }) => ({\n  bills: many(bills),\n  purchaseOrders: many(purchaseOrders),\n}));\n\nexport const accountsRelations = relations(accounts, ({ one, many }) => ({\n  parent: one(accounts, { fields: [accounts.parentId], references: [accounts.id] }),\n  children: many(accounts),\n  bankAccounts: many(bankAccounts),\n  journalEntryLineItems: many(journalEntryLineItems),\n}));\n\nexport const invoicesRelations = relations(invoices, ({ one, many }) => ({\n  client: one(clients, { fields: [invoices.clientId], references: [clients.id] }),\n  lineItems: many(invoiceLineItems),\n}));\n\nexport const invoiceLineItemsRelations = relations(invoiceLineItems, ({ one }) => ({\n  invoice: one(invoices, { fields: [invoiceLineItems.invoiceId], references: [invoices.id] }),\n  account: one(accounts, { fields: [invoiceLineItems.accountId], references: [accounts.id] }),\n}));\n\nexport const billsRelations = relations(bills, ({ one }) => ({\n  vendor: one(vendors, { fields: [bills.vendorId], references: [vendors.id] }),\n}));\n\nexport const purchaseOrdersRelations = relations(purchaseOrders, ({ one }) => ({\n  vendor: one(vendors, { fields: [purchaseOrders.vendorId], references: [vendors.id] }),\n}));\n\nexport const expenseClaimsRelations = relations(expenseClaims, ({ one }) => ({\n  user: one(users, { fields: [expenseClaims.userId], references: [users.id] }),\n  approver: one(users, { fields: [expenseClaims.approvedBy], references: [users.id] }),\n  account: one(accounts, { fields: [expenseClaims.accountId], references: [accounts.id] }),\n}));\n\nexport const bankAccountsRelations = relations(bankAccounts, ({ one, many }) => ({\n  account: one(accounts, { fields: [bankAccounts.accountId], references: [accounts.id] }),\n  transactions: many(bankTransactions),\n}));\n\nexport const bankTransactionsRelations = relations(bankTransactions, ({ one }) => ({\n  bankAccount: one(bankAccounts, { fields: [bankTransactions.bankAccountId], references: [bankAccounts.id] }),\n}));\n\nexport const journalEntriesRelations = relations(journalEntries, ({ many }) => ({\n  lineItems: many(journalEntryLineItems),\n}));\n\nexport const journalEntryLineItemsRelations = relations(journalEntryLineItems, ({ one }) => ({\n  journalEntry: one(journalEntries, { fields: [journalEntryLineItems.journalEntryId], references: [journalEntries.id] }),\n  account: one(accounts, { fields: [journalEntryLineItems.accountId], references: [accounts.id] }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true });\nexport const insertClientSchema = createInsertSchema(clients).omit({ id: true, createdAt: true });\nexport const insertVendorSchema = createInsertSchema(vendors).omit({ id: true, createdAt: true });\nexport const insertAccountSchema = createInsertSchema(accounts).omit({ id: true, createdAt: true });\nexport const insertBankAccountSchema = createInsertSchema(bankAccounts).omit({ id: true, createdAt: true });\nexport const insertInvoiceSchema = createInsertSchema(invoices).omit({ id: true, createdAt: true });\nexport const insertInvoiceLineItemSchema = createInsertSchema(invoiceLineItems).omit({ id: true });\nexport const insertBillSchema = createInsertSchema(bills).omit({ id: true, createdAt: true });\nexport const insertPurchaseOrderSchema = createInsertSchema(purchaseOrders).omit({ id: true, createdAt: true });\nexport const insertExpenseClaimSchema = createInsertSchema(expenseClaims).omit({ id: true, createdAt: true, approvedAt: true });\nexport const insertBankTransactionSchema = createInsertSchema(bankTransactions).omit({ id: true, createdAt: true });\nexport const insertJournalEntrySchema = createInsertSchema(journalEntries).omit({ id: true, createdAt: true });\nexport const insertJournalEntryLineItemSchema = createInsertSchema(journalEntryLineItems).omit({ id: true });\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Client = typeof clients.$inferSelect;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type Vendor = typeof vendors.$inferSelect;\nexport type InsertVendor = z.infer<typeof insertVendorSchema>;\nexport type Account = typeof accounts.$inferSelect;\nexport type InsertAccount = z.infer<typeof insertAccountSchema>;\nexport type BankAccount = typeof bankAccounts.$inferSelect;\nexport type InsertBankAccount = z.infer<typeof insertBankAccountSchema>;\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\nexport type InvoiceLineItem = typeof invoiceLineItems.$inferSelect;\nexport type InsertInvoiceLineItem = z.infer<typeof insertInvoiceLineItemSchema>;\nexport type Bill = typeof bills.$inferSelect;\nexport type InsertBill = z.infer<typeof insertBillSchema>;\nexport type PurchaseOrder = typeof purchaseOrders.$inferSelect;\nexport type InsertPurchaseOrder = z.infer<typeof insertPurchaseOrderSchema>;\nexport type ExpenseClaim = typeof expenseClaims.$inferSelect;\nexport type InsertExpenseClaim = z.infer<typeof insertExpenseClaimSchema>;\nexport type BankTransaction = typeof bankTransactions.$inferSelect;\nexport type InsertBankTransaction = z.infer<typeof insertBankTransactionSchema>;\nexport type JournalEntry = typeof journalEntries.$inferSelect;\nexport type InsertJournalEntry = z.infer<typeof insertJournalEntrySchema>;\nexport type JournalEntryLineItem = typeof journalEntryLineItems.$inferSelect;\nexport type InsertJournalEntryLineItem = z.infer<typeof insertJournalEntryLineItemSchema>;\n","size_bytes":14558},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Invoices from \"@/pages/invoices\";\nimport Clients from \"@/pages/clients\";\nimport Vendors from \"@/pages/vendors\";\nimport ExpenseClaims from \"@/pages/expense-claims\";\nimport BankReconciliation from \"@/pages/bank-reconciliation\";\nimport PurchaseOrders from \"@/pages/purchase-orders\";\nimport Reports from \"@/pages/reports\";\nimport ChartOfAccounts from \"@/pages/chart-of-accounts\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\n\nfunction Router() {\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header />\n        <main className=\"flex-1 overflow-auto bg-background\">\n          <Switch>\n            <Route path=\"/\" component={Dashboard} />\n            <Route path=\"/dashboard\" component={Dashboard} />\n            <Route path=\"/invoices\" component={Invoices} />\n            <Route path=\"/clients\" component={Clients} />\n            <Route path=\"/vendors\" component={Vendors} />\n            <Route path=\"/expense-claims\" component={ExpenseClaims} />\n            <Route path=\"/bank-reconciliation\" component={BankReconciliation} />\n            <Route path=\"/purchase-orders\" component={PurchaseOrders} />\n            <Route path=\"/reports\" component={Reports} />\n            <Route path=\"/chart-of-accounts\" component={ChartOfAccounts} />\n            <Route component={NotFound} />\n          </Switch>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2070},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222, 84%, 5%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 5%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 5%);\n  --primary: hsl(210, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222, 47%, 11%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222, 47%, 11%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(210, 83%, 53%);\n  --chart-1: hsl(210, 83%, 53%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222, 84%, 5%);\n  --sidebar-primary: hsl(210, 83%, 53%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222, 47%, 11%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(210, 83%, 53%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00), 0px 1px 2px -1px hsl(210, 83%, 53%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00), 0px 1px 2px -1px hsl(210, 83%, 53%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00), 0px 2px 4px -1px hsl(210, 83%, 53%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00), 0px 4px 6px -1px hsl(210, 83%, 53%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00), 0px 8px 10px -1px hsl(210, 83%, 53%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 47%, 11%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 47%, 11%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(210, 83%, 53%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(210, 83%, 53%);\n  --sidebar: hsl(222, 47%, 11%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(210, 83%, 53%);\n  --sidebar-primary-foreground: hsl(222, 84%, 5%);\n  --sidebar-accent: hsl(217, 32%, 17%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(210, 83%, 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":3469},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/chart-utils.ts":{"content":"import {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n} from 'chart.js';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement\n);\n\nexport interface ChartData {\n  labels: string[];\n  datasets: Array<{\n    label: string;\n    data: number[];\n    backgroundColor?: string | string[];\n    borderColor?: string | string[];\n    borderWidth?: number;\n  }>;\n}\n\nexport interface ChartOptions {\n  responsive?: boolean;\n  maintainAspectRatio?: boolean;\n  plugins?: {\n    legend?: {\n      display?: boolean;\n      position?: 'top' | 'bottom' | 'left' | 'right';\n    };\n    title?: {\n      display?: boolean;\n      text?: string;\n    };\n  };\n  scales?: {\n    x?: {\n      display?: boolean;\n      title?: {\n        display?: boolean;\n        text?: string;\n      };\n    };\n    y?: {\n      display?: boolean;\n      beginAtZero?: boolean;\n      title?: {\n        display?: boolean;\n        text?: string;\n      };\n    };\n  };\n}\n\n// Color palette for consistent chart styling\nexport const CHART_COLORS = {\n  primary: 'hsl(210, 83%, 53%)',\n  secondary: 'hsl(210, 40%, 96%)',\n  success: 'hsl(142, 71%, 45%)',\n  warning: 'hsl(38, 92%, 50%)',\n  danger: 'hsl(0, 84%, 60%)',\n  info: 'hsl(199, 89%, 48%)',\n  light: 'hsl(210, 40%, 98%)',\n  dark: 'hsl(222, 84%, 5%)',\n  muted: 'hsl(215, 16%, 47%)',\n};\n\nexport const CHART_COLORS_ARRAY = [\n  CHART_COLORS.primary,\n  CHART_COLORS.success,\n  CHART_COLORS.warning,\n  CHART_COLORS.danger,\n  CHART_COLORS.info,\n  'hsl(291, 64%, 42%)',\n  'hsl(31, 81%, 56%)',\n  'hsl(338, 77%, 58%)',\n];\n\nexport function createRevenueChartData(\n  months: string[],\n  revenueData: number[]\n): ChartData {\n  return {\n    labels: months,\n    datasets: [\n      {\n        label: 'Revenue',\n        data: revenueData,\n        backgroundColor: 'hsla(210, 83%, 53%, 0.1)',\n        borderColor: CHART_COLORS.primary,\n        borderWidth: 2,\n      },\n    ],\n  };\n}\n\nexport function createExpenseChartData(\n  categories: string[],\n  amounts: number[]\n): ChartData {\n  return {\n    labels: categories,\n    datasets: [\n      {\n        label: 'Expenses',\n        data: amounts,\n        backgroundColor: CHART_COLORS_ARRAY.slice(0, categories.length),\n        borderColor: CHART_COLORS_ARRAY.slice(0, categories.length),\n        borderWidth: 1,\n      },\n    ],\n  };\n}\n\nexport function createCashFlowChartData(\n  months: string[],\n  inflow: number[],\n  outflow: number[]\n): ChartData {\n  return {\n    labels: months,\n    datasets: [\n      {\n        label: 'Cash Inflow',\n        data: inflow,\n        backgroundColor: 'hsla(142, 71%, 45%, 0.8)',\n        borderColor: CHART_COLORS.success,\n        borderWidth: 1,\n      },\n      {\n        label: 'Cash Outflow',\n        data: outflow,\n        backgroundColor: 'hsla(0, 84%, 60%, 0.8)',\n        borderColor: CHART_COLORS.danger,\n        borderWidth: 1,\n      },\n    ],\n  };\n}\n\nexport function createProfitLossChartData(\n  months: string[],\n  revenue: number[],\n  expenses: number[]\n): ChartData {\n  const profit = revenue.map((rev, index) => rev - expenses[index]);\n  \n  return {\n    labels: months,\n    datasets: [\n      {\n        label: 'Revenue',\n        data: revenue,\n        backgroundColor: 'hsla(210, 83%, 53%, 0.8)',\n        borderColor: CHART_COLORS.primary,\n        borderWidth: 1,\n      },\n      {\n        label: 'Expenses',\n        data: expenses,\n        backgroundColor: 'hsla(38, 92%, 50%, 0.8)',\n        borderColor: CHART_COLORS.warning,\n        borderWidth: 1,\n      },\n      {\n        label: 'Profit',\n        data: profit,\n        backgroundColor: profit.map(p => \n          p >= 0 ? 'hsla(142, 71%, 45%, 0.8)' : 'hsla(0, 84%, 60%, 0.8)'\n        ),\n        borderColor: profit.map(p => \n          p >= 0 ? CHART_COLORS.success : CHART_COLORS.danger\n        ),\n        borderWidth: 1,\n      },\n    ],\n  };\n}\n\nexport const defaultLineChartOptions: ChartOptions = {\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    legend: {\n      display: true,\n      position: 'top',\n    },\n  },\n  scales: {\n    x: {\n      display: true,\n      title: {\n        display: true,\n        text: 'Month',\n      },\n    },\n    y: {\n      display: true,\n      beginAtZero: true,\n      title: {\n        display: true,\n        text: 'Amount ($)',\n      },\n    },\n  },\n};\n\nexport const defaultBarChartOptions: ChartOptions = {\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    legend: {\n      display: true,\n      position: 'top',\n    },\n  },\n  scales: {\n    x: {\n      display: true,\n    },\n    y: {\n      display: true,\n      beginAtZero: true,\n      title: {\n        display: true,\n        text: 'Amount ($)',\n      },\n    },\n  },\n};\n\nexport const defaultDoughnutChartOptions: ChartOptions = {\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    legend: {\n      display: true,\n      position: 'right',\n    },\n  },\n};\n\nexport function formatCurrency(amount: number): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n}\n\nexport function formatPercentage(value: number): string {\n  return `${value.toFixed(1)}%`;\n}\n\nexport function calculatePercentageChange(\n  current: number,\n  previous: number\n): number {\n  if (previous === 0) return current > 0 ? 100 : 0;\n  return ((current - previous) / previous) * 100;\n}\n\nexport function generateMonthLabels(count: number = 6): string[] {\n  const labels = [];\n  const currentDate = new Date();\n  \n  for (let i = count - 1; i >= 0; i--) {\n    const date = new Date(currentDate);\n    date.setMonth(date.getMonth() - i);\n    labels.push(date.toLocaleDateString('en-US', { \n      month: 'short',\n      year: date.getFullYear() !== currentDate.getFullYear() ? 'numeric' : undefined\n    }));\n  }\n  \n  return labels;\n}\n\n// Sample data generators for demonstration purposes\nexport function generateSampleRevenueData(months: number = 6): number[] {\n  const baseAmount = 50000;\n  return Array.from({ length: months }, (_, i) => {\n    const trend = i * 2000; // Growing trend\n    const variance = Math.random() * 10000 - 5000; // Random variance\n    return Math.max(0, baseAmount + trend + variance);\n  });\n}\n\nexport function generateSampleExpenseData(categories: string[]): number[] {\n  return categories.map(() => Math.random() * 25000 + 5000);\n}\n","size_bytes":6490},"client/src/lib/pdf-generator.ts":{"content":"import jsPDF from 'jspdf';\n\nexport interface InvoiceData {\n  invoiceNumber: string;\n  issueDate: string;\n  dueDate: string;\n  client: {\n    name: string;\n    email?: string;\n    address?: string;\n    city?: string;\n    state?: string;\n    zipCode?: string;\n  };\n  lineItems: Array<{\n    description: string;\n    quantity: string;\n    rate: string;\n    amount: string;\n  }>;\n  subtotal: string;\n  taxAmount: string;\n  totalAmount: string;\n  notes?: string;\n  terms?: string;\n}\n\nexport class PDFGenerator {\n  private doc: jsPDF;\n  private pageWidth: number;\n  private pageHeight: number;\n  private margin: number;\n\n  constructor() {\n    this.doc = new jsPDF();\n    this.pageWidth = this.doc.internal.pageSize.getWidth();\n    this.pageHeight = this.doc.internal.pageSize.getHeight();\n    this.margin = 20;\n  }\n\n  generateInvoicePDF(invoiceData: InvoiceData): Uint8Array {\n    // Header\n    this.addHeader(invoiceData);\n    \n    // Company and client info\n    this.addCompanyInfo();\n    this.addClientInfo(invoiceData);\n    \n    // Invoice details\n    this.addInvoiceDetails(invoiceData);\n    \n    // Line items table\n    this.addLineItemsTable(invoiceData);\n    \n    // Totals\n    this.addTotals(invoiceData);\n    \n    // Footer with terms and notes\n    this.addFooter(invoiceData);\n    \n    return this.doc.output('arraybuffer') as Uint8Array;\n  }\n\n  private addHeader(invoiceData: InvoiceData): void {\n    // Company logo area (placeholder)\n    this.doc.setFillColor(59, 130, 246); // Primary blue\n    this.doc.rect(this.margin, this.margin, 30, 20, 'F');\n    \n    // Company name\n    this.doc.setFontSize(24);\n    this.doc.setFont('helvetica', 'bold');\n    this.doc.text('FinanceFlow', this.margin + 35, this.margin + 15);\n    \n    // Invoice title\n    this.doc.setFontSize(28);\n    this.doc.setFont('helvetica', 'bold');\n    this.doc.text('INVOICE', this.pageWidth - this.margin - 60, this.margin + 15);\n    \n    // Invoice number\n    this.doc.setFontSize(12);\n    this.doc.setFont('helvetica', 'normal');\n    this.doc.text(`Invoice #: ${invoiceData.invoiceNumber}`, this.pageWidth - this.margin - 60, this.margin + 25);\n  }\n\n  private addCompanyInfo(): void {\n    const startY = this.margin + 50;\n    \n    this.doc.setFontSize(10);\n    this.doc.setFont('helvetica', 'normal');\n    \n    const companyInfo = [\n      'FinanceFlow Inc.',\n      '123 Business Street',\n      'New York, NY 10001',\n      'Phone: (555) 123-4567',\n      'Email: billing@financeflow.com'\n    ];\n    \n    companyInfo.forEach((line, index) => {\n      this.doc.text(line, this.margin, startY + (index * 5));\n    });\n  }\n\n  private addClientInfo(invoiceData: InvoiceData): void {\n    const startY = this.margin + 50;\n    const startX = this.pageWidth / 2;\n    \n    this.doc.setFontSize(10);\n    this.doc.setFont('helvetica', 'bold');\n    this.doc.text('Bill To:', startX, startY);\n    \n    this.doc.setFont('helvetica', 'normal');\n    const clientInfo = [\n      invoiceData.client.name,\n      invoiceData.client.email || '',\n      invoiceData.client.address || '',\n      [invoiceData.client.city, invoiceData.client.state, invoiceData.client.zipCode]\n        .filter(Boolean)\n        .join(', ')\n    ].filter(line => line.trim() !== '');\n    \n    clientInfo.forEach((line, index) => {\n      this.doc.text(line, startX, startY + 10 + (index * 5));\n    });\n  }\n\n  private addInvoiceDetails(invoiceData: InvoiceData): void {\n    const startY = this.margin + 100;\n    \n    this.doc.setFontSize(10);\n    \n    // Issue Date\n    this.doc.setFont('helvetica', 'bold');\n    this.doc.text('Issue Date:', this.margin, startY);\n    this.doc.setFont('helvetica', 'normal');\n    this.doc.text(new Date(invoiceData.issueDate).toLocaleDateString(), this.margin + 30, startY);\n    \n    // Due Date\n    this.doc.setFont('helvetica', 'bold');\n    this.doc.text('Due Date:', this.margin, startY + 10);\n    this.doc.setFont('helvetica', 'normal');\n    this.doc.text(new Date(invoiceData.dueDate).toLocaleDateString(), this.margin + 30, startY + 10);\n  }\n\n  private addLineItemsTable(invoiceData: InvoiceData): void {\n    const startY = this.margin + 130;\n    const tableWidth = this.pageWidth - (2 * this.margin);\n    const colWidths = {\n      description: tableWidth * 0.5,\n      quantity: tableWidth * 0.15,\n      rate: tableWidth * 0.175,\n      amount: tableWidth * 0.175\n    };\n    \n    // Table header\n    this.doc.setFillColor(240, 240, 240);\n    this.doc.rect(this.margin, startY, tableWidth, 10, 'F');\n    \n    this.doc.setFontSize(9);\n    this.doc.setFont('helvetica', 'bold');\n    \n    let currentX = this.margin + 2;\n    this.doc.text('Description', currentX, startY + 7);\n    currentX += colWidths.description;\n    this.doc.text('Qty', currentX, startY + 7);\n    currentX += colWidths.quantity;\n    this.doc.text('Rate', currentX, startY + 7);\n    currentX += colWidths.rate;\n    this.doc.text('Amount', currentX, startY + 7);\n    \n    // Table rows\n    this.doc.setFont('helvetica', 'normal');\n    let currentY = startY + 15;\n    \n    invoiceData.lineItems.forEach((item, index) => {\n      currentX = this.margin + 2;\n      \n      // Add background for alternating rows\n      if (index % 2 === 1) {\n        this.doc.setFillColor(250, 250, 250);\n        this.doc.rect(this.margin, currentY - 5, tableWidth, 10, 'F');\n      }\n      \n      this.doc.text(item.description, currentX, currentY);\n      currentX += colWidths.description;\n      this.doc.text(item.quantity, currentX, currentY);\n      currentX += colWidths.quantity;\n      this.doc.text(`$${parseFloat(item.rate).toFixed(2)}`, currentX, currentY);\n      currentX += colWidths.rate;\n      this.doc.text(`$${parseFloat(item.amount).toFixed(2)}`, currentX, currentY);\n      \n      currentY += 10;\n    });\n    \n    // Table border\n    this.doc.setDrawColor(200, 200, 200);\n    this.doc.rect(this.margin, startY, tableWidth, currentY - startY);\n  }\n\n  private addTotals(invoiceData: InvoiceData): void {\n    const startY = this.margin + 130 + (invoiceData.lineItems.length * 10) + 30;\n    const rightAlign = this.pageWidth - this.margin - 60;\n    \n    this.doc.setFontSize(10);\n    \n    // Subtotal\n    this.doc.setFont('helvetica', 'normal');\n    this.doc.text('Subtotal:', rightAlign, startY);\n    this.doc.text(`$${parseFloat(invoiceData.subtotal).toFixed(2)}`, rightAlign + 40, startY);\n    \n    // Tax\n    this.doc.text('Tax:', rightAlign, startY + 10);\n    this.doc.text(`$${parseFloat(invoiceData.taxAmount).toFixed(2)}`, rightAlign + 40, startY + 10);\n    \n    // Total\n    this.doc.setFont('helvetica', 'bold');\n    this.doc.setFontSize(12);\n    this.doc.text('Total:', rightAlign, startY + 25);\n    this.doc.text(`$${parseFloat(invoiceData.totalAmount).toFixed(2)}`, rightAlign + 40, startY + 25);\n    \n    // Line above total\n    this.doc.setDrawColor(0, 0, 0);\n    this.doc.line(rightAlign, startY + 20, rightAlign + 55, startY + 20);\n  }\n\n  private addFooter(invoiceData: InvoiceData): void {\n    let currentY = this.pageHeight - 60;\n    \n    this.doc.setFontSize(9);\n    this.doc.setFont('helvetica', 'normal');\n    \n    if (invoiceData.notes) {\n      this.doc.setFont('helvetica', 'bold');\n      this.doc.text('Notes:', this.margin, currentY);\n      this.doc.setFont('helvetica', 'normal');\n      this.doc.text(invoiceData.notes, this.margin, currentY + 8);\n      currentY += 20;\n    }\n    \n    if (invoiceData.terms) {\n      this.doc.setFont('helvetica', 'bold');\n      this.doc.text('Terms:', this.margin, currentY);\n      this.doc.setFont('helvetica', 'normal');\n      this.doc.text(invoiceData.terms, this.margin, currentY + 8);\n    }\n  }\n\n  downloadPDF(filename: string): void {\n    this.doc.save(filename);\n  }\n\n  getPDFBlob(): Blob {\n    return this.doc.output('blob');\n  }\n}\n\nexport function generateInvoicePDF(invoiceData: InvoiceData): PDFGenerator {\n  const generator = new PDFGenerator();\n  generator.generateInvoicePDF(invoiceData);\n  return generator;\n}\n\nexport function downloadInvoicePDF(invoiceData: InvoiceData, filename?: string): void {\n  const generator = generateInvoicePDF(invoiceData);\n  const finalFilename = filename || `invoice-${invoiceData.invoiceNumber}.pdf`;\n  generator.downloadPDF(finalFilename);\n}\n","size_bytes":8163},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/bank-reconciliation.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { ArrowDown, ArrowUp, CheckCircle, Upload, RefreshCw } from \"lucide-react\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function BankReconciliation() {\n  const [selectedBankAccount, setSelectedBankAccount] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: bankAccounts } = useQuery({\n    queryKey: [\"/api/bank-accounts\"],\n  });\n\n  const { data: transactions, isLoading } = useQuery({\n    queryKey: [\"/api/bank-transactions\", selectedBankAccount],\n    queryFn: () => {\n      const url = selectedBankAccount \n        ? `/api/bank-transactions?bankAccountId=${selectedBankAccount}`\n        : \"/api/bank-transactions\";\n      return fetch(url, { credentials: \"include\" }).then(res => res.json());\n    },\n  });\n\n  const reconcileTransactionMutation = useMutation({\n    mutationFn: async (transactionId: string) => {\n      await apiRequest(\"PUT\", `/api/bank-transactions/${transactionId}/reconcile`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Transaction reconciled successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bank-transactions\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reconcile transaction\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredTransactions = transactions?.filter((transaction: any) =>\n    transaction.description.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const unreconciledTransactions = filteredTransactions?.filter((t: any) => !t.isReconciled) || [];\n  const reconciledTransactions = filteredTransactions?.filter((t: any) => t.isReconciled) || [];\n\n  const formatCurrency = (amount: string) => {\n    const num = parseFloat(amount || '0');\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(num);\n  };\n\n  const getTotalBalance = () => {\n    if (!filteredTransactions) return 0;\n    return filteredTransactions.reduce((sum: number, t: any) => sum + parseFloat(t.amount || '0'), 0);\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-bank-reconciliation-title\">Bank Reconciliation</h2>\n          <p className=\"text-muted-foreground\" data-testid=\"text-bank-reconciliation-subtitle\">Match bank transactions with your accounting records</p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Button variant=\"outline\" data-testid=\"button-import-transactions\">\n            <Upload className=\"h-4 w-4 mr-2\" />\n            Import Bank Statement\n          </Button>\n          <Button data-testid=\"button-sync-bank-feeds\">\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Sync Bank Feeds\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Bank Account</label>\n              <Select value={selectedBankAccount} onValueChange={setSelectedBankAccount}>\n                <SelectTrigger data-testid=\"select-bank-account\">\n                  <SelectValue placeholder=\"Select bank account\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All Accounts</SelectItem>\n                  {bankAccounts?.map((account: any) => (\n                    <SelectItem key={account.id} value={account.id}>\n                      {account.name} - {account.bankName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Search Transactions</label>\n              <Input\n                placeholder=\"Search by description...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                data-testid=\"input-search-transactions\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card data-testid=\"card-total-balance\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-sm text-muted-foreground\">Total Balance</div>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-balance\">\n              {formatCurrency(getTotalBalance().toString())}\n            </div>\n          </CardContent>\n        </Card>\n        <Card data-testid=\"card-unreconciled-count\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-sm text-muted-foreground\">Unreconciled</div>\n            <div className=\"text-2xl font-bold text-orange-600\" data-testid=\"text-unreconciled-count\">\n              {unreconciledTransactions.length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card data-testid=\"card-reconciled-count\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-sm text-muted-foreground\">Reconciled</div>\n            <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-reconciled-count\">\n              {reconciledTransactions.length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card data-testid=\"card-reconciliation-progress\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-sm text-muted-foreground\">Progress</div>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-reconciliation-progress\">\n              {filteredTransactions?.length ? \n                Math.round((reconciledTransactions.length / filteredTransactions.length) * 100) : 0}%\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Unreconciled Transactions */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-orange-600\" data-testid=\"text-unreconciled-title\">\n            Unreconciled Transactions ({unreconciledTransactions.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"animate-pulse space-y-3\" data-testid=\"loader-unreconciled\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"h-12 bg-muted rounded\"></div>\n              ))}\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Description</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Bank Account</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {unreconciledTransactions.map((transaction: any) => (\n                  <TableRow key={transaction.id} data-testid={`row-unreconciled-${transaction.id}`}>\n                    <TableCell data-testid={`text-date-${transaction.id}`}>\n                      {new Date(transaction.transactionDate).toLocaleDateString()}\n                    </TableCell>\n                    <TableCell data-testid={`text-description-${transaction.id}`}>\n                      {transaction.description}\n                    </TableCell>\n                    <TableCell>\n                      <div className={`font-medium ${\n                        parseFloat(transaction.amount) >= 0 ? 'text-green-600' : 'text-red-600'\n                      }`} data-testid={`text-amount-${transaction.id}`}>\n                        {formatCurrency(transaction.amount)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        {parseFloat(transaction.amount) >= 0 ? (\n                          <ArrowDown className=\"h-4 w-4 text-green-600\" />\n                        ) : (\n                          <ArrowUp className=\"h-4 w-4 text-red-600\" />\n                        )}\n                        <span data-testid={`text-type-${transaction.id}`}>\n                          {parseFloat(transaction.amount) >= 0 ? 'Credit' : 'Debit'}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell data-testid={`text-bank-account-${transaction.id}`}>\n                      {transaction.bankAccount?.name || 'N/A'}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => reconcileTransactionMutation.mutate(transaction.id)}\n                        disabled={reconcileTransactionMutation.isPending}\n                        data-testid={`button-reconcile-${transaction.id}`}\n                      >\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {unreconciledTransactions.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center py-8\" data-testid=\"text-no-unreconciled\">\n                      <CheckCircle className=\"h-12 w-12 mx-auto text-green-600 mb-4\" />\n                      <p className=\"text-muted-foreground\">All transactions are reconciled!</p>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Reconciled Transactions */}\n      {reconciledTransactions.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-green-600\" data-testid=\"text-reconciled-title\">\n              Reconciled Transactions ({reconciledTransactions.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Description</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Reconciled Date</TableHead>\n                  <TableHead>Status</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {reconciledTransactions.slice(0, 10).map((transaction: any) => (\n                  <TableRow key={transaction.id} data-testid={`row-reconciled-${transaction.id}`}>\n                    <TableCell data-testid={`text-reconciled-date-${transaction.id}`}>\n                      {new Date(transaction.transactionDate).toLocaleDateString()}\n                    </TableCell>\n                    <TableCell data-testid={`text-reconciled-description-${transaction.id}`}>\n                      {transaction.description}\n                    </TableCell>\n                    <TableCell>\n                      <div className={`font-medium ${\n                        parseFloat(transaction.amount) >= 0 ? 'text-green-600' : 'text-red-600'\n                      }`} data-testid={`text-reconciled-amount-${transaction.id}`}>\n                        {formatCurrency(transaction.amount)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        {parseFloat(transaction.amount) >= 0 ? (\n                          <ArrowDown className=\"h-4 w-4 text-green-600\" />\n                        ) : (\n                          <ArrowUp className=\"h-4 w-4 text-red-600\" />\n                        )}\n                        <span data-testid={`text-reconciled-type-${transaction.id}`}>\n                          {parseFloat(transaction.amount) >= 0 ? 'Credit' : 'Debit'}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell data-testid={`text-reconciled-at-${transaction.id}`}>\n                      {transaction.reconciledAt ? \n                        new Date(transaction.reconciledAt).toLocaleDateString() : \n                        'N/A'\n                      }\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"default\" data-testid={`badge-reconciled-status-${transaction.id}`}>\n                        Reconciled\n                      </Badge>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":13683},"client/src/pages/chart-of-accounts.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Plus, Search, List, Edit, Trash2, FolderOpen, Folder } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AccountForm from \"@/components/accounts/account-form\";\n\nexport default function ChartOfAccounts() {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingAccount, setEditingAccount] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: accounts, isLoading } = useQuery({\n    queryKey: [\"/api/accounts\"],\n  });\n\n  const filteredAccounts = accounts?.filter((account: any) =>\n    account.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    account.code.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    account.type.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getAccountTypeVariant = (type: string) => {\n    switch (type) {\n      case \"asset\":\n        return \"default\";\n      case \"liability\":\n        return \"destructive\";\n      case \"equity\":\n        return \"secondary\";\n      case \"revenue\":\n        return \"default\";\n      case \"expense\":\n        return \"outline\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  const getAccountTypeColor = (type: string) => {\n    switch (type) {\n      case \"asset\":\n        return \"text-green-600\";\n      case \"liability\":\n        return \"text-red-600\";\n      case \"equity\":\n        return \"text-blue-600\";\n      case \"revenue\":\n        return \"text-purple-600\";\n      case \"expense\":\n        return \"text-orange-600\";\n      default:\n        return \"text-gray-600\";\n    }\n  };\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(parseFloat(amount || '0'));\n  };\n\n  const handleEdit = (account: any) => {\n    setEditingAccount(account);\n    setIsFormOpen(true);\n  };\n\n  // Group accounts by type\n  const groupedAccounts = filteredAccounts?.reduce((groups: any, account: any) => {\n    const type = account.type;\n    if (!groups[type]) {\n      groups[type] = [];\n    }\n    groups[type].push(account);\n    return groups;\n  }, {});\n\n  const accountTypeOrder = [\"asset\", \"liability\", \"equity\", \"revenue\", \"expense\"];\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-chart-of-accounts-title\">Chart of Accounts</h2>\n          <p className=\"text-muted-foreground\" data-testid=\"text-chart-of-accounts-subtitle\">Manage your accounting structure and account categories</p>\n        </div>\n        <Dialog open={isFormOpen} onOpenChange={(open) => {\n          setIsFormOpen(open);\n          if (!open) setEditingAccount(null);\n        }}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-account\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Account\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle data-testid=\"text-account-form-title\">\n                {editingAccount ? \"Edit Account\" : \"Add New Account\"}\n              </DialogTitle>\n            </DialogHeader>\n            <AccountForm\n              account={editingAccount}\n              accounts={accounts || []}\n              onSuccess={() => {\n                setIsFormOpen(false);\n                setEditingAccount(null);\n                queryClient.invalidateQueries({ queryKey: [\"/api/accounts\"] });\n              }}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search accounts...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-accounts\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Accounts by Type */}\n      {isLoading ? (\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"animate-pulse space-y-3\" data-testid=\"loader-accounts\">\n              {[...Array(8)].map((_, i) => (\n                <div key={i} className=\"h-12 bg-muted rounded\"></div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-6\">\n          {accountTypeOrder.map((type) => {\n            const typeAccounts = groupedAccounts?.[type] || [];\n            if (typeAccounts.length === 0) return null;\n\n            return (\n              <Card key={type}>\n                <CardHeader>\n                  <CardTitle className={`flex items-center gap-2 ${getAccountTypeColor(type)}`} data-testid={`text-${type}-accounts-title`}>\n                    <FolderOpen className=\"h-5 w-5\" />\n                    {type.charAt(0).toUpperCase() + type.slice(1)} Accounts ({typeAccounts.length})\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Code</TableHead>\n                        <TableHead>Name</TableHead>\n                        <TableHead>Sub Type</TableHead>\n                        <TableHead>Balance</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead className=\"text-right\">Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {typeAccounts.map((account: any) => (\n                        <TableRow key={account.id} data-testid={`row-account-${account.id}`}>\n                          <TableCell>\n                            <div className=\"font-mono font-medium\" data-testid={`text-account-code-${account.id}`}>\n                              {account.code}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\" data-testid={`text-account-name-${account.id}`}>\n                                {account.name}\n                              </div>\n                              {account.description && (\n                                <div className=\"text-sm text-muted-foreground\">\n                                  {account.description}\n                                </div>\n                              )}\n                            </div>\n                          </TableCell>\n                          <TableCell data-testid={`text-sub-type-${account.id}`}>\n                            {account.subType ? (\n                              <Badge variant=\"outline\">\n                                {account.subType.replace('_', ' ').toLowerCase()}\n                              </Badge>\n                            ) : (\n                              '-'\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            <div className={`font-medium ${\n                              parseFloat(account.balance || '0') >= 0 ? 'text-green-600' : 'text-red-600'\n                            }`} data-testid={`text-balance-${account.id}`}>\n                              {formatCurrency(account.balance)}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Badge\n                              variant={account.isActive ? \"default\" : \"secondary\"}\n                              data-testid={`badge-status-${account.id}`}\n                            >\n                              {account.isActive ? \"Active\" : \"Inactive\"}\n                            </Badge>\n                          </TableCell>\n                          <TableCell className=\"text-right\">\n                            <div className=\"flex justify-end gap-2\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleEdit(account)}\n                                data-testid={`button-edit-${account.id}`}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                data-testid={`button-delete-${account.id}`}\n                              >\n                                <Trash2 className=\"h-4 w-4 text-red-600\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n            );\n          })}\n\n          {(!groupedAccounts || Object.keys(groupedAccounts).length === 0) && (\n            <Card>\n              <CardContent className=\"text-center py-12\" data-testid=\"text-no-accounts\">\n                <List className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">No accounts found</p>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":10316},"client/src/pages/clients.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Plus, Search, Users, Mail, Phone, MapPin, Edit, Trash2 } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ClientForm from \"@/components/clients/client-form\";\n\nexport default function Clients() {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingClient, setEditingClient] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: clients, isLoading } = useQuery({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const deleteClientMutation = useMutation({\n    mutationFn: async (clientId: string) => {\n      await apiRequest(\"DELETE\", `/api/clients/${clientId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Client deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete client\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredClients = clients?.filter((client: any) =>\n    client.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    client.email?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleEdit = (client: any) => {\n    setEditingClient(client);\n    setIsFormOpen(true);\n  };\n\n  const handleDelete = (clientId: string) => {\n    if (window.confirm(\"Are you sure you want to delete this client?\")) {\n      deleteClientMutation.mutate(clientId);\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-clients-title\">Clients</h2>\n          <p className=\"text-muted-foreground\" data-testid=\"text-clients-subtitle\">Manage your client information and contacts</p>\n        </div>\n        <Dialog open={isFormOpen} onOpenChange={(open) => {\n          setIsFormOpen(open);\n          if (!open) setEditingClient(null);\n        }}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-client\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Client\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle data-testid=\"text-client-form-title\">\n                {editingClient ? \"Edit Client\" : \"Add New Client\"}\n              </DialogTitle>\n            </DialogHeader>\n            <ClientForm\n              client={editingClient}\n              onSuccess={() => {\n                setIsFormOpen(false);\n                setEditingClient(null);\n                queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n              }}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search clients...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-clients\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Clients Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\" data-testid=\"text-clients-list-title\">\n            <Users className=\"h-5 w-5\" />\n            Clients ({filteredClients?.length || 0})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"animate-pulse space-y-3\" data-testid=\"loader-clients\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-12 bg-muted rounded\"></div>\n              ))}\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Contact</TableHead>\n                  <TableHead>Location</TableHead>\n                  <TableHead>Payment Terms</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredClients?.map((client: any) => (\n                  <TableRow key={client.id} data-testid={`row-client-${client.id}`}>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\" data-testid={`text-client-name-${client.id}`}>\n                          {client.name}\n                        </div>\n                        {client.taxId && (\n                          <div className=\"text-sm text-muted-foreground\">\n                            Tax ID: {client.taxId}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        {client.email && (\n                          <div className=\"flex items-center gap-2 text-sm\">\n                            <Mail className=\"h-3 w-3\" />\n                            {client.email}\n                          </div>\n                        )}\n                        {client.phone && (\n                          <div className=\"flex items-center gap-2 text-sm\">\n                            <Phone className=\"h-3 w-3\" />\n                            {client.phone}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {client.city && (\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <MapPin className=\"h-3 w-3\" />\n                          {client.city}, {client.state}\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <span data-testid={`text-payment-terms-${client.id}`}>\n                        {client.paymentTerms} days\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <Badge\n                        variant={client.isActive ? \"default\" : \"secondary\"}\n                        data-testid={`badge-status-${client.id}`}\n                      >\n                        {client.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(client)}\n                          data-testid={`button-edit-${client.id}`}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(client.id)}\n                          data-testid={`button-delete-${client.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4 text-red-600\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {(!filteredClients || filteredClients.length === 0) && (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center py-8\" data-testid=\"text-no-clients\">\n                      <Users className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                      <p className=\"text-muted-foreground\">No clients found</p>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8932},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport MetricsCards from \"@/components/dashboard/metrics-cards\";\nimport RevenueChart from \"@/components/dashboard/revenue-chart\";\nimport ExpenseChart from \"@/components/dashboard/expense-chart\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Download, RefreshCw, ArrowDown, AlertTriangle, Info, CheckCircle } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, Receipt, Scale, ShoppingCart, BarChart3 } from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { data: metrics, isLoading: metricsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/metrics\"],\n  });\n\n  const { data: recentInvoices, isLoading: invoicesLoading } = useQuery({\n    queryKey: [\"/api/invoices\"],\n  });\n\n  const { data: bankTransactions, isLoading: transactionsLoading } = useQuery({\n    queryKey: [\"/api/bank-transactions\"],\n  });\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Dashboard Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-dashboard-title\">Dashboard</h2>\n          <p className=\"text-muted-foreground\" data-testid=\"text-dashboard-subtitle\">Welcome back, get an overview of your business finances</p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Button variant=\"secondary\" data-testid=\"button-export\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n          <Button data-testid=\"button-new-invoice\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            New Invoice\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Metrics Cards */}\n      <MetricsCards metrics={metrics} isLoading={metricsLoading} />\n\n      {/* Charts Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <RevenueChart />\n        <ExpenseChart />\n      </div>\n\n      {/* Recent Activity & Quick Actions */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        \n        {/* Recent Invoices */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle data-testid=\"text-recent-invoices-title\">Recent Invoices</CardTitle>\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-invoices\">\n                  View All\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {invoicesLoading ? (\n                <div className=\"animate-pulse space-y-3\" data-testid=\"loader-invoices\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"h-12 bg-muted rounded\"></div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-muted/50\">\n                      <tr>\n                        <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Invoice #</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Client</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Amount</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Status</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Due Date</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {recentInvoices?.slice(0, 3).map((invoice: any) => (\n                        <tr key={invoice.id} className=\"border-t border-border hover:bg-muted/30\" data-testid={`row-invoice-${invoice.id}`}>\n                          <td className=\"p-4\">\n                            <span className=\"font-medium text-foreground\" data-testid={`text-invoice-number-${invoice.id}`}>\n                              {invoice.invoiceNumber}\n                            </span>\n                          </td>\n                          <td className=\"p-4\">\n                            <span className=\"text-foreground\" data-testid={`text-client-name-${invoice.id}`}>\n                              {invoice.client?.name || 'N/A'}\n                            </span>\n                          </td>\n                          <td className=\"p-4\">\n                            <span className=\"font-medium text-foreground\" data-testid={`text-amount-${invoice.id}`}>\n                              ${parseFloat(invoice.totalAmount || '0').toLocaleString()}\n                            </span>\n                          </td>\n                          <td className=\"p-4\">\n                            <Badge\n                              variant={\n                                invoice.status === 'paid' ? 'default' :\n                                invoice.status === 'overdue' ? 'destructive' : 'secondary'\n                              }\n                              data-testid={`badge-status-${invoice.id}`}\n                            >\n                              {invoice.status}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4\">\n                            <span className=\"text-muted-foreground\" data-testid={`text-due-date-${invoice.id}`}>\n                              {new Date(invoice.dueDate).toLocaleDateString()}\n                            </span>\n                          </td>\n                        </tr>\n                      ))}\n                      {(!recentInvoices || recentInvoices.length === 0) && (\n                        <tr>\n                          <td colSpan={5} className=\"p-4 text-center text-muted-foreground\" data-testid=\"text-no-invoices\">\n                            No invoices found\n                          </td>\n                        </tr>\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle data-testid=\"text-quick-actions-title\">Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-create-invoice\">\n                <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center mr-3\">\n                  <FileText className=\"h-4 w-4 text-blue-600\" />\n                </div>\n                Create Invoice\n              </Button>\n              \n              <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-add-expense\">\n                <div className=\"w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center mr-3\">\n                  <Receipt className=\"h-4 w-4 text-red-600\" />\n                </div>\n                Add Expense\n              </Button>\n              \n              <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-bank-reconciliation\">\n                <div className=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center mr-3\">\n                  <Scale className=\"h-4 w-4 text-green-600\" />\n                </div>\n                Bank Reconciliation\n              </Button>\n              \n              <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-create-po\">\n                <div className=\"w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center mr-3\">\n                  <ShoppingCart className=\"h-4 w-4 text-purple-600\" />\n                </div>\n                Purchase Order\n              </Button>\n              \n              <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-generate-report\">\n                <div className=\"w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center mr-3\">\n                  <BarChart3 className=\"h-4 w-4 text-yellow-600\" />\n                </div>\n                Generate Report\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Bank Feeds & Alerts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        \n        {/* Recent Bank Transactions */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle data-testid=\"text-bank-transactions-title\">Recent Bank Transactions</CardTitle>\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-sync-bank\">\n                <RefreshCw className=\"h-4 w-4 mr-1\" />\n                Sync Now\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {transactionsLoading ? (\n              <div className=\"animate-pulse space-y-3\" data-testid=\"loader-transactions\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"h-16 bg-muted rounded\"></div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {bankTransactions?.slice(0, 3).map((transaction: any) => (\n                  <div key={transaction.id} className=\"flex items-center justify-between p-3 rounded-lg border border-border\" data-testid={`card-transaction-${transaction.id}`}>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n                        parseFloat(transaction.amount) > 0 ? 'bg-green-100' : 'bg-red-100'\n                      }`}>\n                        <ArrowDown className={`h-4 w-4 ${\n                          parseFloat(transaction.amount) > 0 ? 'text-green-600' : 'text-red-600'\n                        }`} />\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-foreground\" data-testid={`text-transaction-description-${transaction.id}`}>\n                          {transaction.description}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\" data-testid={`text-transaction-date-${transaction.id}`}>\n                          {new Date(transaction.transactionDate).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className={`font-medium ${\n                        parseFloat(transaction.amount) > 0 ? 'text-green-600' : 'text-red-600'\n                      }`} data-testid={`text-transaction-amount-${transaction.id}`}>\n                        {parseFloat(transaction.amount) > 0 ? '+' : ''}${Math.abs(parseFloat(transaction.amount)).toLocaleString()}\n                      </p>\n                      <p className={`text-xs ${\n                        transaction.isReconciled ? 'text-green-600' : 'text-muted-foreground'\n                      }`} data-testid={`text-reconciliation-status-${transaction.id}`}>\n                        {transaction.isReconciled ? 'Matched' : 'Unmatched'}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n                {(!bankTransactions || bankTransactions.length === 0) && (\n                  <div className=\"text-center text-muted-foreground py-4\" data-testid=\"text-no-transactions\">\n                    No recent transactions\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Alerts & Notifications */}\n        <Card>\n          <CardHeader>\n            <CardTitle data-testid=\"text-alerts-title\">Alerts & Notifications</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {metrics?.overdueInvoicesCount > 0 && (\n                <div className=\"flex items-start space-x-3 p-3 rounded-lg bg-orange-50 border border-orange-200\" data-testid=\"alert-overdue-invoices\">\n                  <div className=\"w-8 h-8 bg-orange-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                    <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-foreground\" data-testid=\"text-overdue-count\">\n                      {metrics.overdueInvoicesCount} Overdue Invoices\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Follow up required\n                    </p>\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"flex items-start space-x-3 p-3 rounded-lg bg-blue-50 border border-blue-200\" data-testid=\"alert-month-close\">\n                <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <Info className=\"h-4 w-4 text-blue-600\" />\n                </div>\n                <div>\n                  <p className=\"font-medium text-foreground\">Monthly Financial Close</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Due in 3 days - Reconciliation pending\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start space-x-3 p-3 rounded-lg bg-green-50 border border-green-200\" data-testid=\"alert-backup-success\">\n                <div className=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                </div>\n                <div>\n                  <p className=\"font-medium text-foreground\">System Status</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    All systems operational\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n    </div>\n  );\n}\n","size_bytes":14397},"client/src/pages/expense-claims.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Plus, Search, CreditCard, FileText, CheckCircle, XCircle } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ExpenseClaimForm from \"@/components/expense-claims/expense-claim-form\";\n\nexport default function ExpenseClaims() {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: expenseClaims, isLoading } = useQuery({\n    queryKey: [\"/api/expense-claims\"],\n  });\n\n  const approveClaimMutation = useMutation({\n    mutationFn: async (claimId: string) => {\n      await apiRequest(\"PUT\", `/api/expense-claims/${claimId}/approve`, {\n        approverId: \"current-user-id\" // In a real app, this would come from auth context\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Expense claim approved successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/expense-claims\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve expense claim\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredClaims = expenseClaims?.filter((claim: any) =>\n    claim.claimNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    claim.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    claim.user?.fullName?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getStatusVariant = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return \"default\";\n      case \"rejected\":\n        return \"destructive\";\n      case \"paid\":\n        return \"secondary\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(parseFloat(amount || '0'));\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-expense-claims-title\">Expense Claims</h2>\n          <p className=\"text-muted-foreground\" data-testid=\"text-expense-claims-subtitle\">Manage employee expense claims and reimbursements</p>\n        </div>\n        <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-expense-claim\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Submit Expense Claim\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle data-testid=\"text-expense-claim-form-title\">Submit New Expense Claim</DialogTitle>\n            </DialogHeader>\n            <ExpenseClaimForm\n              onSuccess={() => {\n                setIsFormOpen(false);\n                queryClient.invalidateQueries({ queryKey: [\"/api/expense-claims\"] });\n              }}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search expense claims...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-expense-claims\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Expense Claims Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\" data-testid=\"text-expense-claims-list-title\">\n            <CreditCard className=\"h-5 w-5\" />\n            Expense Claims ({filteredClaims?.length || 0})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"animate-pulse space-y-3\" data-testid=\"loader-expense-claims\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-12 bg-muted rounded\"></div>\n              ))}\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Claim #</TableHead>\n                  <TableHead>Employee</TableHead>\n                  <TableHead>Description</TableHead>\n                  <TableHead>Category</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredClaims?.map((claim: any) => (\n                  <TableRow key={claim.id} data-testid={`row-expense-claim-${claim.id}`}>\n                    <TableCell>\n                      <div className=\"font-medium\" data-testid={`text-claim-number-${claim.id}`}>\n                        {claim.claimNumber}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div data-testid={`text-employee-name-${claim.id}`}>\n                        {claim.user?.fullName || claim.user?.username || 'N/A'}\n                      </div>\n                      {claim.user?.email && (\n                        <div className=\"text-sm text-muted-foreground\">\n                          {claim.user.email}\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div data-testid={`text-description-${claim.id}`}>\n                        {claim.description}\n                      </div>\n                      {claim.receiptUrl && (\n                        <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                          <FileText className=\"h-3 w-3\" />\n                          Receipt attached\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell data-testid={`text-category-${claim.id}`}>\n                      {claim.category || 'General'}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"font-medium\" data-testid={`text-amount-${claim.id}`}>\n                        {formatCurrency(claim.amount)}\n                      </div>\n                    </TableCell>\n                    <TableCell data-testid={`text-expense-date-${claim.id}`}>\n                      {new Date(claim.expenseDate).toLocaleDateString()}\n                    </TableCell>\n                    <TableCell>\n                      <Badge\n                        variant={getStatusVariant(claim.status)}\n                        data-testid={`badge-status-${claim.id}`}\n                      >\n                        {claim.status.charAt(0).toUpperCase() + claim.status.slice(1)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        {claim.status === 'submitted' && (\n                          <>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => approveClaimMutation.mutate(claim.id)}\n                              disabled={approveClaimMutation.isPending}\n                              data-testid={`button-approve-${claim.id}`}\n                            >\n                              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              data-testid={`button-reject-${claim.id}`}\n                            >\n                              <XCircle className=\"h-4 w-4 text-red-600\" />\n                            </Button>\n                          </>\n                        )}\n                        {claim.receiptUrl && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            data-testid={`button-view-receipt-${claim.id}`}\n                          >\n                            <FileText className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {(!filteredClaims || filteredClaims.length === 0) && (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"text-center py-8\" data-testid=\"text-no-expense-claims\">\n                      <CreditCard className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                      <p className=\"text-muted-foreground\">No expense claims found</p>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9984},"client/src/pages/invoices.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Plus, Search, FileText, Download } from \"lucide-react\";\nimport InvoiceForm from \"@/components/invoices/invoice-form\";\nimport InvoiceList from \"@/components/invoices/invoice-list\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport default function Invoices() {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: invoices, isLoading } = useQuery({\n    queryKey: [\"/api/invoices\"],\n  });\n\n  const { data: clients } = useQuery({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const filteredInvoices = invoices?.filter((invoice: any) =>\n    invoice.invoiceNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    invoice.client?.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-invoices-title\">Invoices</h2>\n          <p className=\"text-muted-foreground\" data-testid=\"text-invoices-subtitle\">Manage your invoices and track payments</p>\n        </div>\n        <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-invoice\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Invoice\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle data-testid=\"text-invoice-form-title\">Create New Invoice</DialogTitle>\n            </DialogHeader>\n            <InvoiceForm\n              clients={clients || []}\n              onSuccess={() => {\n                setIsFormOpen(false);\n                queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n              }}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Search and Filters */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search invoices...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-invoices\"\n              />\n            </div>\n            <Button variant=\"outline\" data-testid=\"button-export-invoices\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Invoices List */}\n      <InvoiceList invoices={filteredInvoices || []} isLoading={isLoading} />\n    </div>\n  );\n}\n","size_bytes":3353},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/purchase-orders.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Plus, Search, ShoppingCart, Eye, Edit, Trash2 } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport PurchaseOrderForm from \"@/components/purchase-orders/purchase-order-form\";\n\nexport default function PurchaseOrders() {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingPO, setEditingPO] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: purchaseOrders, isLoading } = useQuery({\n    queryKey: [\"/api/purchase-orders\"],\n  });\n\n  const { data: vendors } = useQuery({\n    queryKey: [\"/api/vendors\"],\n  });\n\n  const filteredPOs = purchaseOrders?.filter((po: any) =>\n    po.poNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    po.vendor?.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getStatusVariant = (status: string) => {\n    switch (status) {\n      case \"received\":\n        return \"default\";\n      case \"cancelled\":\n        return \"destructive\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(parseFloat(amount || '0'));\n  };\n\n  const handleEdit = (po: any) => {\n    setEditingPO(po);\n    setIsFormOpen(true);\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-purchase-orders-title\">Purchase Orders</h2>\n          <p className=\"text-muted-foreground\" data-testid=\"text-purchase-orders-subtitle\">Manage purchase orders and vendor requests</p>\n        </div>\n        <Dialog open={isFormOpen} onOpenChange={(open) => {\n          setIsFormOpen(open);\n          if (!open) setEditingPO(null);\n        }}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-purchase-order\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Purchase Order\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle data-testid=\"text-purchase-order-form-title\">\n                {editingPO ? \"Edit Purchase Order\" : \"Create New Purchase Order\"}\n              </DialogTitle>\n            </DialogHeader>\n            <PurchaseOrderForm\n              purchaseOrder={editingPO}\n              vendors={vendors || []}\n              onSuccess={() => {\n                setIsFormOpen(false);\n                setEditingPO(null);\n                queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\"] });\n              }}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search purchase orders...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-purchase-orders\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Purchase Orders Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\" data-testid=\"text-purchase-orders-list-title\">\n            <ShoppingCart className=\"h-5 w-5\" />\n            Purchase Orders ({filteredPOs?.length || 0})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"animate-pulse space-y-3\" data-testid=\"loader-purchase-orders\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-12 bg-muted rounded\"></div>\n              ))}\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>PO Number</TableHead>\n                  <TableHead>Vendor</TableHead>\n                  <TableHead>Order Date</TableHead>\n                  <TableHead>Expected Date</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredPOs?.map((po: any) => (\n                  <TableRow key={po.id} data-testid={`row-purchase-order-${po.id}`}>\n                    <TableCell>\n                      <div className=\"font-medium\" data-testid={`text-po-number-${po.id}`}>\n                        {po.poNumber}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div data-testid={`text-vendor-name-${po.id}`}>\n                        {po.vendor?.name || 'N/A'}\n                      </div>\n                      {po.vendor?.email && (\n                        <div className=\"text-sm text-muted-foreground\">\n                          {po.vendor.email}\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell data-testid={`text-order-date-${po.id}`}>\n                      {new Date(po.orderDate).toLocaleDateString()}\n                    </TableCell>\n                    <TableCell data-testid={`text-expected-date-${po.id}`}>\n                      {po.expectedDate ? new Date(po.expectedDate).toLocaleDateString() : 'N/A'}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"font-medium\" data-testid={`text-total-amount-${po.id}`}>\n                        {formatCurrency(po.totalAmount)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge\n                        variant={getStatusVariant(po.status)}\n                        data-testid={`badge-status-${po.id}`}\n                      >\n                        {po.status.charAt(0).toUpperCase() + po.status.slice(1)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          data-testid={`button-view-${po.id}`}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(po)}\n                          data-testid={`button-edit-${po.id}`}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          data-testid={`button-delete-${po.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4 text-red-600\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {(!filteredPOs || filteredPOs.length === 0) && (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-8\" data-testid=\"text-no-purchase-orders\">\n                      <ShoppingCart className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                      <p className=\"text-muted-foreground\">No purchase orders found</p>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8661},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { BarChart3, FileText, Download, Calendar, TrendingUp, DollarSign } from \"lucide-react\";\n\nexport default function Reports() {\n  const [reportType, setReportType] = useState(\"\");\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const [selectedDate, setSelectedDate] = useState(\"\");\n\n  const reports = [\n    {\n      id: \"profit-loss\",\n      name: \"Profit & Loss Statement\",\n      description: \"Revenue and expenses over a period\",\n      icon: TrendingUp,\n      color: \"bg-green-100 text-green-600\",\n      requiresDateRange: true,\n    },\n    {\n      id: \"balance-sheet\",\n      name: \"Balance Sheet\",\n      description: \"Assets, liabilities, and equity at a point in time\",\n      icon: DollarSign,\n      color: \"bg-blue-100 text-blue-600\",\n      requiresDateRange: false,\n    },\n    {\n      id: \"cash-flow\",\n      name: \"Cash Flow Statement\",\n      description: \"Cash receipts and payments over a period\",\n      icon: BarChart3,\n      color: \"bg-purple-100 text-purple-600\",\n      requiresDateRange: true,\n    },\n    {\n      id: \"aged-receivables\",\n      name: \"Aged Receivables\",\n      description: \"Outstanding customer invoices by age\",\n      icon: FileText,\n      color: \"bg-orange-100 text-orange-600\",\n      requiresDateRange: false,\n    },\n    {\n      id: \"aged-payables\",\n      name: \"Aged Payables\", \n      description: \"Outstanding vendor bills by age\",\n      icon: FileText,\n      color: \"bg-red-100 text-red-600\",\n      requiresDateRange: false,\n    },\n    {\n      id: \"trial-balance\",\n      name: \"Trial Balance\",\n      description: \"All account balances to verify bookkeeping accuracy\",\n      icon: BarChart3,\n      color: \"bg-gray-100 text-gray-600\",\n      requiresDateRange: false,\n    },\n  ];\n\n  const selectedReport = reports.find(r => r.id === reportType);\n\n  const generateReport = () => {\n    console.log(\"Generating report:\", reportType, { startDate, endDate, selectedDate });\n    // This would trigger the actual report generation\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-reports-title\">Financial Reports</h2>\n          <p className=\"text-muted-foreground\" data-testid=\"text-reports-subtitle\">Generate comprehensive financial reports and statements</p>\n        </div>\n      </div>\n\n      {/* Report Selection */}\n      <Card>\n        <CardHeader>\n          <CardTitle data-testid=\"text-report-selection-title\">Select Report Type</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {reports.map((report) => {\n              const Icon = report.icon;\n              return (\n                <div\n                  key={report.id}\n                  className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${\n                    reportType === report.id \n                      ? 'border-primary bg-primary/5' \n                      : 'border-border hover:border-primary/50'\n                  }`}\n                  onClick={() => setReportType(report.id)}\n                  data-testid={`card-report-${report.id}`}\n                >\n                  <div className=\"flex items-start space-x-3\">\n                    <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${report.color}`}>\n                      <Icon className=\"h-6 w-6\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-foreground\" data-testid={`text-report-name-${report.id}`}>\n                        {report.name}\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground mt-1\" data-testid={`text-report-description-${report.id}`}>\n                        {report.description}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Report Parameters */}\n      {selectedReport && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\" data-testid=\"text-report-parameters-title\">\n              <Calendar className=\"h-5 w-5\" />\n              Report Parameters\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {selectedReport.requiresDateRange ? (\n                <>\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Start Date</label>\n                    <Input\n                      type=\"date\"\n                      value={startDate}\n                      onChange={(e) => setStartDate(e.target.value)}\n                      data-testid=\"input-start-date\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">End Date</label>\n                    <Input\n                      type=\"date\"\n                      value={endDate}\n                      onChange={(e) => setEndDate(e.target.value)}\n                      data-testid=\"input-end-date\"\n                    />\n                  </div>\n                </>\n              ) : (\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">As of Date</label>\n                  <Input\n                    type=\"date\"\n                    value={selectedDate}\n                    onChange={(e) => setSelectedDate(e.target.value)}\n                    data-testid=\"input-selected-date\"\n                  />\n                </div>\n              )}\n              <div className=\"flex items-end\">\n                <Button \n                  onClick={generateReport}\n                  disabled={\n                    !reportType || \n                    (selectedReport.requiresDateRange && (!startDate || !endDate)) ||\n                    (!selectedReport.requiresDateRange && !selectedDate)\n                  }\n                  className=\"w-full\"\n                  data-testid=\"button-generate-report\"\n                >\n                  <BarChart3 className=\"h-4 w-4 mr-2\" />\n                  Generate Report\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Recent Reports */}\n      <Card>\n        <CardHeader>\n          <CardTitle data-testid=\"text-recent-reports-title\">Recent Reports</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid=\"card-recent-report-1\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"h-5 w-5 text-green-600\" />\n                </div>\n                <div>\n                  <p className=\"font-medium\" data-testid=\"text-recent-report-name-1\">Profit & Loss Statement</p>\n                  <p className=\"text-sm text-muted-foreground\">January 1 - December 31, 2024</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-muted-foreground\">Generated 2 days ago</span>\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-download-recent-1\">\n                  <Download className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid=\"card-recent-report-2\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <DollarSign className=\"h-5 w-5 text-blue-600\" />\n                </div>\n                <div>\n                  <p className=\"font-medium\" data-testid=\"text-recent-report-name-2\">Balance Sheet</p>\n                  <p className=\"text-sm text-muted-foreground\">As of December 31, 2024</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-muted-foreground\">Generated 1 week ago</span>\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-download-recent-2\">\n                  <Download className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid=\"card-recent-report-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center\">\n                  <BarChart3 className=\"h-5 w-5 text-purple-600\" />\n                </div>\n                <div>\n                  <p className=\"font-medium\" data-testid=\"text-recent-report-name-3\">Cash Flow Statement</p>\n                  <p className=\"text-sm text-muted-foreground\">Q4 2024</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-muted-foreground\">Generated 2 weeks ago</span>\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-download-recent-3\">\n                  <Download className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10144},"client/src/pages/vendors.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Plus, Search, Truck, Mail, Phone, MapPin, Edit, Trash2 } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport VendorForm from \"@/components/vendors/vendor-form\";\n\nexport default function Vendors() {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingVendor, setEditingVendor] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: vendors, isLoading } = useQuery({\n    queryKey: [\"/api/vendors\"],\n  });\n\n  const deleteVendorMutation = useMutation({\n    mutationFn: async (vendorId: string) => {\n      await apiRequest(\"DELETE\", `/api/vendors/${vendorId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Vendor deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/vendors\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete vendor\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredVendors = vendors?.filter((vendor: any) =>\n    vendor.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    vendor.email?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleEdit = (vendor: any) => {\n    setEditingVendor(vendor);\n    setIsFormOpen(true);\n  };\n\n  const handleDelete = (vendorId: string) => {\n    if (window.confirm(\"Are you sure you want to delete this vendor?\")) {\n      deleteVendorMutation.mutate(vendorId);\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-vendors-title\">Vendors</h2>\n          <p className=\"text-muted-foreground\" data-testid=\"text-vendors-subtitle\">Manage your vendor information and suppliers</p>\n        </div>\n        <Dialog open={isFormOpen} onOpenChange={(open) => {\n          setIsFormOpen(open);\n          if (!open) setEditingVendor(null);\n        }}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-vendor\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Vendor\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle data-testid=\"text-vendor-form-title\">\n                {editingVendor ? \"Edit Vendor\" : \"Add New Vendor\"}\n              </DialogTitle>\n            </DialogHeader>\n            <VendorForm\n              vendor={editingVendor}\n              onSuccess={() => {\n                setIsFormOpen(false);\n                setEditingVendor(null);\n                queryClient.invalidateQueries({ queryKey: [\"/api/vendors\"] });\n              }}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search vendors...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-vendors\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Vendors Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\" data-testid=\"text-vendors-list-title\">\n            <Truck className=\"h-5 w-5\" />\n            Vendors ({filteredVendors?.length || 0})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"animate-pulse space-y-3\" data-testid=\"loader-vendors\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-12 bg-muted rounded\"></div>\n              ))}\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Contact</TableHead>\n                  <TableHead>Location</TableHead>\n                  <TableHead>Payment Terms</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredVendors?.map((vendor: any) => (\n                  <TableRow key={vendor.id} data-testid={`row-vendor-${vendor.id}`}>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\" data-testid={`text-vendor-name-${vendor.id}`}>\n                          {vendor.name}\n                        </div>\n                        {vendor.taxId && (\n                          <div className=\"text-sm text-muted-foreground\">\n                            Tax ID: {vendor.taxId}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        {vendor.email && (\n                          <div className=\"flex items-center gap-2 text-sm\">\n                            <Mail className=\"h-3 w-3\" />\n                            {vendor.email}\n                          </div>\n                        )}\n                        {vendor.phone && (\n                          <div className=\"flex items-center gap-2 text-sm\">\n                            <Phone className=\"h-3 w-3\" />\n                            {vendor.phone}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {vendor.city && (\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <MapPin className=\"h-3 w-3\" />\n                          {vendor.city}, {vendor.state}\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <span data-testid={`text-payment-terms-${vendor.id}`}>\n                        {vendor.paymentTerms} days\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <Badge\n                        variant={vendor.isActive ? \"default\" : \"secondary\"}\n                        data-testid={`badge-status-${vendor.id}`}\n                      >\n                        {vendor.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(vendor)}\n                          data-testid={`button-edit-${vendor.id}`}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(vendor.id)}\n                          data-testid={`button-delete-${vendor.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4 text-red-600\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {(!filteredVendors || filteredVendors.length === 0) && (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center py-8\" data-testid=\"text-no-vendors\">\n                      <Truck className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                      <p className=\"text-muted-foreground\">No vendors found</p>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8933},"client/src/components/accounts/account-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst accountSchema = z.object({\n  code: z.string().min(1, \"Account code is required\"),\n  name: z.string().min(1, \"Account name is required\"),\n  type: z.string().min(1, \"Account type is required\"),\n  subType: z.string().optional(),\n  parentId: z.string().optional(),\n  description: z.string().optional(),\n  balance: z.string().default(\"0.00\"),\n  isActive: z.boolean().default(true),\n});\n\ninterface AccountFormProps {\n  account?: any;\n  accounts: any[];\n  onSuccess: () => void;\n}\n\nexport default function AccountForm({ account, accounts, onSuccess }: AccountFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!account;\n\n  const form = useForm<z.infer<typeof accountSchema>>({\n    resolver: zodResolver(accountSchema),\n    defaultValues: {\n      code: account?.code || \"\",\n      name: account?.name || \"\",\n      type: account?.type || \"\",\n      subType: account?.subType || \"\",\n      parentId: account?.parentId || \"\",\n      description: account?.description || \"\",\n      balance: account?.balance || \"0.00\",\n      isActive: account?.isActive ?? true,\n    },\n  });\n\n  const accountMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof accountSchema>) => {\n      const url = isEditing ? `/api/accounts/${account.id}` : \"/api/accounts\";\n      const method = isEditing ? \"PUT\" : \"POST\";\n      const response = await apiRequest(method, url, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: `Account ${isEditing ? \"updated\" : \"created\"} successfully`,\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to ${isEditing ? \"update\" : \"create\"} account`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof accountSchema>) => {\n    accountMutation.mutate(data);\n  };\n\n  const accountTypes = [\n    { value: \"asset\", label: \"Asset\" },\n    { value: \"liability\", label: \"Liability\" },\n    { value: \"equity\", label: \"Equity\" },\n    { value: \"revenue\", label: \"Revenue\" },\n    { value: \"expense\", label: \"Expense\" },\n  ];\n\n  const getSubTypeOptions = (type: string) => {\n    switch (type) {\n      case \"asset\":\n        return [\n          { value: \"current_asset\", label: \"Current Asset\" },\n          { value: \"fixed_asset\", label: \"Fixed Asset\" },\n          { value: \"other_asset\", label: \"Other Asset\" },\n        ];\n      case \"liability\":\n        return [\n          { value: \"current_liability\", label: \"Current Liability\" },\n          { value: \"long_term_liability\", label: \"Long-term Liability\" },\n          { value: \"other_liability\", label: \"Other Liability\" },\n        ];\n      case \"equity\":\n        return [\n          { value: \"owner_equity\", label: \"Owner's Equity\" },\n          { value: \"retained_earnings\", label: \"Retained Earnings\" },\n        ];\n      case \"revenue\":\n        return [\n          { value: \"operating_revenue\", label: \"Operating Revenue\" },\n          { value: \"other_revenue\", label: \"Other Revenue\" },\n        ];\n      case \"expense\":\n        return [\n          { value: \"operating_expense\", label: \"Operating Expense\" },\n          { value: \"other_expense\", label: \"Other Expense\" },\n        ];\n      default:\n        return [];\n    }\n  };\n\n  const selectedType = form.watch(\"type\");\n  const subTypeOptions = getSubTypeOptions(selectedType);\n\n  // Filter parent accounts (same type, not self)\n  const parentAccountOptions = accounts.filter(\n    (acc) => acc.type === selectedType && acc.id !== account?.id\n  );\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Basic Information */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"code\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Account Code *</FormLabel>\n                <FormControl>\n                  <Input \n                    placeholder=\"1000\" \n                    {...field} \n                    data-testid=\"input-account-code\" \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Account Name *</FormLabel>\n                <FormControl>\n                  <Input \n                    placeholder=\"Cash in Bank\" \n                    {...field} \n                    data-testid=\"input-account-name\" \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Account Type and Sub-type */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"type\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Account Type *</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-account-type\">\n                      <SelectValue placeholder=\"Select account type\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {accountTypes.map((type) => (\n                      <SelectItem key={type.value} value={type.value}>\n                        {type.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"subType\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Sub-type</FormLabel>\n                <Select \n                  onValueChange={field.onChange} \n                  defaultValue={field.value}\n                  disabled={!selectedType}\n                >\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-account-subtype\">\n                      <SelectValue placeholder=\"Select sub-type\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {subTypeOptions.map((subType) => (\n                      <SelectItem key={subType.value} value={subType.value}>\n                        {subType.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Parent Account */}\n        <FormField\n          control={form.control}\n          name=\"parentId\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Parent Account</FormLabel>\n              <Select \n                onValueChange={field.onChange} \n                defaultValue={field.value}\n                disabled={parentAccountOptions.length === 0}\n              >\n                <FormControl>\n                  <SelectTrigger data-testid=\"select-parent-account\">\n                    <SelectValue placeholder=\"Select parent account (optional)\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {parentAccountOptions.map((parentAccount) => (\n                    <SelectItem key={parentAccount.id} value={parentAccount.id}>\n                      {parentAccount.code} - {parentAccount.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Opening Balance */}\n        <FormField\n          control={form.control}\n          name=\"balance\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Opening Balance</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"number\" \n                  min=\"0\" \n                  step=\"0.01\" \n                  placeholder=\"0.00\"\n                  {...field} \n                  data-testid=\"input-opening-balance\" \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Description */}\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Description</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"Account description...\" \n                  {...field} \n                  data-testid=\"textarea-description\" \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Active Status */}\n        <FormField\n          control={form.control}\n          name=\"isActive\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n              <div className=\"space-y-0.5\">\n                <FormLabel>Active Status</FormLabel>\n                <div className=\"text-sm text-muted-foreground\">\n                  Enable this account for transactions\n                </div>\n              </div>\n              <FormControl>\n                <Switch\n                  checked={field.value}\n                  onCheckedChange={field.onChange}\n                  data-testid=\"switch-active-status\"\n                />\n              </FormControl>\n            </FormItem>\n          )}\n        />\n\n        {/* Form Actions */}\n        <div className=\"flex justify-end space-x-2\">\n          <Button\n            type=\"submit\"\n            disabled={accountMutation.isPending}\n            data-testid=\"button-save-account\"\n          >\n            {accountMutation.isPending ? \"Saving...\" : isEditing ? \"Update Account\" : \"Create Account\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":11037},"client/src/components/clients/client-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst clientSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Valid email is required\").optional().or(z.literal(\"\")),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n  city: z.string().optional(),\n  state: z.string().optional(),\n  zipCode: z.string().optional(),\n  country: z.string().optional(),\n  taxId: z.string().optional(),\n  paymentTerms: z.number().min(0).default(30),\n  isActive: z.boolean().default(true),\n});\n\ninterface ClientFormProps {\n  client?: any;\n  onSuccess: () => void;\n}\n\nexport default function ClientForm({ client, onSuccess }: ClientFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!client;\n\n  const form = useForm<z.infer<typeof clientSchema>>({\n    resolver: zodResolver(clientSchema),\n    defaultValues: {\n      name: client?.name || \"\",\n      email: client?.email || \"\",\n      phone: client?.phone || \"\",\n      address: client?.address || \"\",\n      city: client?.city || \"\",\n      state: client?.state || \"\",\n      zipCode: client?.zipCode || \"\",\n      country: client?.country || \"\",\n      taxId: client?.taxId || \"\",\n      paymentTerms: client?.paymentTerms || 30,\n      isActive: client?.isActive ?? true,\n    },\n  });\n\n  const clientMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof clientSchema>) => {\n      const url = isEditing ? `/api/clients/${client.id}` : \"/api/clients\";\n      const method = isEditing ? \"PUT\" : \"POST\";\n      const response = await apiRequest(method, url, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: `Client ${isEditing ? \"updated\" : \"created\"} successfully`,\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to ${isEditing ? \"update\" : \"create\"} client`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof clientSchema>) => {\n    clientMutation.mutate(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Basic Information */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Company Name *</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Acme Corporation\" {...field} data-testid=\"input-client-name\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"taxId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Tax ID</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"12-3456789\" {...field} data-testid=\"input-tax-id\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Contact Information */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email</FormLabel>\n                <FormControl>\n                  <Input type=\"email\" placeholder=\"contact@acme.com\" {...field} data-testid=\"input-email\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"phone\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Phone</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"+1 (555) 123-4567\" {...field} data-testid=\"input-phone\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Address Information */}\n        <FormField\n          control={form.control}\n          name=\"address\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Address</FormLabel>\n              <FormControl>\n                <Input placeholder=\"123 Business Street\" {...field} data-testid=\"input-address\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"city\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>City</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"New York\" {...field} data-testid=\"input-city\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"state\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>State/Province</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"NY\" {...field} data-testid=\"input-state\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"zipCode\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>ZIP/Postal Code</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"10001\" {...field} data-testid=\"input-zip\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"country\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Country</FormLabel>\n              <FormControl>\n                <Input placeholder=\"United States\" {...field} data-testid=\"input-country\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Business Settings */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"paymentTerms\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Payment Terms (days)</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"number\" \n                    min=\"0\" \n                    {...field} \n                    onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                    data-testid=\"input-payment-terms\" \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"isActive\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n                <div className=\"space-y-0.5\">\n                  <FormLabel>Active Status</FormLabel>\n                  <div className=\"text-sm text-muted-foreground\">\n                    Enable this client for new transactions\n                  </div>\n                </div>\n                <FormControl>\n                  <Switch\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    data-testid=\"switch-active-status\"\n                  />\n                </FormControl>\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Form Actions */}\n        <div className=\"flex justify-end space-x-2\">\n          <Button\n            type=\"submit\"\n            disabled={clientMutation.isPending}\n            data-testid=\"button-save-client\"\n          >\n            {clientMutation.isPending ? \"Saving...\" : isEditing ? \"Update Client\" : \"Create Client\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":8839},"client/src/components/dashboard/expense-chart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function ExpenseChart() {\n  return (\n    <Card data-testid=\"card-expense-chart\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle data-testid=\"text-expense-chart-title\">Expense Breakdown</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-expense-details\">\n            View Details\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-64 bg-muted rounded-lg flex items-center justify-center\" data-testid=\"chart-placeholder-expense\">\n          <p className=\"text-muted-foreground\">Expense Chart - Chart.js integration pending</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":858},"client/src/components/dashboard/metrics-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { DollarSign, FileText, PiggyBank, CreditCard, TrendingUp, Clock, University, TrendingDown } from \"lucide-react\";\n\ninterface MetricsCardsProps {\n  metrics: any;\n  isLoading: boolean;\n}\n\nexport default function MetricsCards({ metrics, isLoading }: MetricsCardsProps) {\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i} data-testid={`skeleton-metric-${i}`}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-24\" />\n                  <Skeleton className=\"h-8 w-20\" />\n                  <Skeleton className=\"h-4 w-32\" />\n                </div>\n                <Skeleton className=\"h-12 w-12 rounded-lg\" />\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const formatCurrency = (value: string | number) => {\n    const num = typeof value === 'string' ? parseFloat(value) : value;\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(num || 0);\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {/* Total Revenue */}\n      <Card data-testid=\"card-total-revenue\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-muted-foreground text-sm font-medium\" data-testid=\"text-revenue-label\">Total Revenue</p>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-revenue-amount\">\n                {formatCurrency(metrics?.totalRevenue || 0)}\n              </p>\n              <p className=\"text-sm text-green-600 mt-1\" data-testid=\"text-revenue-growth\">\n                <TrendingUp className=\"inline h-3 w-3 mr-1\" />\n                {metrics?.revenueGrowth || '0'}% from last month\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n              <DollarSign className=\"h-6 w-6 text-green-600\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Outstanding Invoices */}\n      <Card data-testid=\"card-outstanding-invoices\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-muted-foreground text-sm font-medium\" data-testid=\"text-outstanding-label\">Outstanding Invoices</p>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-outstanding-amount\">\n                {formatCurrency(metrics?.outstandingInvoices || 0)}\n              </p>\n              <p className=\"text-sm text-orange-600 mt-1\" data-testid=\"text-overdue-info\">\n                <Clock className=\"inline h-3 w-3 mr-1\" />\n                {metrics?.overdueInvoicesCount || 0} overdue\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n              <FileText className=\"h-6 w-6 text-orange-600\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Cash Balance */}\n      <Card data-testid=\"card-cash-balance\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-muted-foreground text-sm font-medium\" data-testid=\"text-cash-label\">Cash Balance</p>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-cash-amount\">\n                {formatCurrency(metrics?.cashBalance || 0)}\n              </p>\n              <p className=\"text-sm text-blue-600 mt-1\" data-testid=\"text-bank-accounts-info\">\n                <University className=\"inline h-3 w-3 mr-1\" />\n                {metrics?.bankAccountsCount || 0} accounts\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n              <PiggyBank className=\"h-6 w-6 text-blue-600\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Monthly Expenses */}\n      <Card data-testid=\"card-monthly-expenses\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-muted-foreground text-sm font-medium\" data-testid=\"text-expenses-label\">Monthly Expenses</p>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-expenses-amount\">\n                {formatCurrency(metrics?.monthlyExpenses || 0)}\n              </p>\n              <p className=\"text-sm text-red-600 mt-1\" data-testid=\"text-expense-growth\">\n                <TrendingUp className=\"inline h-3 w-3 mr-1\" />\n                {metrics?.expenseGrowth || '0'}% from last month\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n              <CreditCard className=\"h-6 w-6 text-red-600\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5470},"client/src/components/dashboard/revenue-chart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function RevenueChart() {\n  return (\n    <Card data-testid=\"card-revenue-chart\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle data-testid=\"text-chart-title\">Revenue Trend</CardTitle>\n          <Select defaultValue=\"6months\">\n            <SelectTrigger className=\"w-auto\" data-testid=\"select-chart-period\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"6months\">Last 6 months</SelectItem>\n              <SelectItem value=\"1year\">Last year</SelectItem>\n              <SelectItem value=\"2years\">Last 2 years</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-64 bg-muted rounded-lg flex items-center justify-center\" data-testid=\"chart-placeholder-revenue\">\n          <p className=\"text-muted-foreground\">Revenue Chart - Chart.js integration pending</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1227},"client/src/components/expense-claims/expense-claim-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst expenseClaimSchema = z.object({\n  claimNumber: z.string().min(1, \"Claim number is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  amount: z.string().min(1, \"Amount is required\"),\n  expenseDate: z.string().min(1, \"Expense date is required\"),\n  category: z.string().optional(),\n  accountId: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ninterface ExpenseClaimFormProps {\n  onSuccess: () => void;\n}\n\nexport default function ExpenseClaimForm({ onSuccess }: ExpenseClaimFormProps) {\n  const { toast } = useToast();\n\n  const { data: accounts } = useQuery({\n    queryKey: [\"/api/accounts\"],\n  });\n\n  const form = useForm<z.infer<typeof expenseClaimSchema>>({\n    resolver: zodResolver(expenseClaimSchema),\n    defaultValues: {\n      claimNumber: `EXP-${Date.now()}`,\n      description: \"\",\n      amount: \"\",\n      expenseDate: \"\",\n      category: \"\",\n      accountId: \"\",\n      notes: \"\",\n    },\n  });\n\n  const createClaimMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof expenseClaimSchema>) => {\n      const response = await apiRequest(\"POST\", \"/api/expense-claims\", {\n        ...data,\n        userId: \"current-user-id\", // In a real app, this would come from auth context\n        status: \"submitted\",\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Expense claim submitted successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit expense claim\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof expenseClaimSchema>) => {\n    createClaimMutation.mutate(data);\n  };\n\n  const expenseCategories = [\n    \"Travel\",\n    \"Meals\",\n    \"Office Supplies\",\n    \"Equipment\",\n    \"Training\",\n    \"Marketing\",\n    \"Utilities\",\n    \"Other\"\n  ];\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Basic Information */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"claimNumber\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Claim Number</FormLabel>\n                <FormControl>\n                  <Input {...field} readOnly data-testid=\"input-claim-number\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"expenseDate\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Expense Date *</FormLabel>\n                <FormControl>\n                  <Input type=\"date\" {...field} data-testid=\"input-expense-date\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Description *</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"Describe the expense...\" \n                  {...field} \n                  data-testid=\"textarea-description\" \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"amount\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Amount *</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"number\" \n                    min=\"0\" \n                    step=\"0.01\" \n                    placeholder=\"0.00\" \n                    {...field} \n                    data-testid=\"input-amount\" \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"category\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Category</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-category\">\n                      <SelectValue placeholder=\"Select category\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {expenseCategories.map((category) => (\n                      <SelectItem key={category} value={category.toLowerCase()}>\n                        {category}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"accountId\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Account</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger data-testid=\"select-account\">\n                    <SelectValue placeholder=\"Select account\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {accounts?.filter((account: any) => account.type === 'expense').map((account: any) => (\n                    <SelectItem key={account.id} value={account.id}>\n                      {account.code} - {account.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"notes\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Additional Notes</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"Any additional information...\" \n                  {...field} \n                  data-testid=\"textarea-notes\" \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Receipt Upload Placeholder */}\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium\">Receipt</label>\n          <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">Receipt upload functionality will be implemented</p>\n          </div>\n        </div>\n\n        {/* Form Actions */}\n        <div className=\"flex justify-end space-x-2\">\n          <Button\n            type=\"submit\"\n            disabled={createClaimMutation.isPending}\n            data-testid=\"button-submit-expense-claim\"\n          >\n            {createClaimMutation.isPending ? \"Submitting...\" : \"Submit Expense Claim\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":8021},"client/src/components/invoices/invoice-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Trash2, Plus } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst invoiceSchema = z.object({\n  clientId: z.string().min(1, \"Client is required\"),\n  invoiceNumber: z.string().min(1, \"Invoice number is required\"),\n  issueDate: z.string().min(1, \"Issue date is required\"),\n  dueDate: z.string().min(1, \"Due date is required\"),\n  subtotal: z.string(),\n  taxAmount: z.string(),\n  totalAmount: z.string(),\n  notes: z.string().optional(),\n  terms: z.string().optional(),\n});\n\nconst lineItemSchema = z.object({\n  description: z.string().min(1, \"Description is required\"),\n  quantity: z.string().min(1, \"Quantity is required\"),\n  rate: z.string().min(1, \"Rate is required\"),\n  amount: z.string(),\n});\n\ninterface InvoiceFormProps {\n  clients: any[];\n  onSuccess: () => void;\n}\n\nexport default function InvoiceForm({ clients, onSuccess }: InvoiceFormProps) {\n  const { toast } = useToast();\n  const [lineItems, setLineItems] = useState([\n    { description: \"\", quantity: \"1\", rate: \"0\", amount: \"0\" }\n  ]);\n\n  const form = useForm<z.infer<typeof invoiceSchema>>({\n    resolver: zodResolver(invoiceSchema),\n    defaultValues: {\n      clientId: \"\",\n      invoiceNumber: \"\",\n      issueDate: \"\",\n      dueDate: \"\",\n      subtotal: \"0\",\n      taxAmount: \"0\",\n      totalAmount: \"0\",\n      notes: \"\",\n      terms: \"\",\n    },\n  });\n\n  const createInvoiceMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/invoices\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Invoice created successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create invoice\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const calculateLineItemAmount = (quantity: string, rate: string) => {\n    const qty = parseFloat(quantity) || 0;\n    const rt = parseFloat(rate) || 0;\n    return (qty * rt).toFixed(2);\n  };\n\n  const calculateTotals = () => {\n    const subtotal = lineItems.reduce((sum, item) => {\n      return sum + parseFloat(calculateLineItemAmount(item.quantity, item.rate));\n    }, 0);\n    \n    const taxAmount = subtotal * 0.1; // 10% tax\n    const totalAmount = subtotal + taxAmount;\n\n    form.setValue(\"subtotal\", subtotal.toFixed(2));\n    form.setValue(\"taxAmount\", taxAmount.toFixed(2));\n    form.setValue(\"totalAmount\", totalAmount.toFixed(2));\n  };\n\n  const updateLineItem = (index: number, field: string, value: string) => {\n    const newLineItems = [...lineItems];\n    newLineItems[index] = { ...newLineItems[index], [field]: value };\n    \n    if (field === \"quantity\" || field === \"rate\") {\n      newLineItems[index].amount = calculateLineItemAmount(\n        newLineItems[index].quantity,\n        newLineItems[index].rate\n      );\n    }\n    \n    setLineItems(newLineItems);\n    calculateTotals();\n  };\n\n  const addLineItem = () => {\n    setLineItems([...lineItems, { description: \"\", quantity: \"1\", rate: \"0\", amount: \"0\" }]);\n  };\n\n  const removeLineItem = (index: number) => {\n    if (lineItems.length > 1) {\n      const newLineItems = lineItems.filter((_, i) => i !== index);\n      setLineItems(newLineItems);\n      calculateTotals();\n    }\n  };\n\n  const onSubmit = (data: z.infer<typeof invoiceSchema>) => {\n    const validLineItems = lineItems.filter(item => \n      item.description && parseFloat(item.quantity) > 0 && parseFloat(item.rate) > 0\n    );\n\n    if (validLineItems.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please add at least one valid line item\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const formattedLineItems = validLineItems.map(item => ({\n      description: item.description,\n      quantity: item.quantity,\n      rate: item.rate,\n      amount: item.amount,\n    }));\n\n    createInvoiceMutation.mutate({\n      ...data,\n      status: \"draft\",\n      lineItems: formattedLineItems,\n    });\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Basic Invoice Details */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <FormField\n            control={form.control}\n            name=\"clientId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Client</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-client\">\n                      <SelectValue placeholder=\"Select a client\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {clients.map((client) => (\n                      <SelectItem key={client.id} value={client.id}>\n                        {client.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"invoiceNumber\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Invoice Number</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"INV-2024-001\" {...field} data-testid=\"input-invoice-number\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"issueDate\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Issue Date</FormLabel>\n                <FormControl>\n                  <Input type=\"date\" {...field} data-testid=\"input-issue-date\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"dueDate\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Due Date</FormLabel>\n                <FormControl>\n                  <Input type=\"date\" {...field} data-testid=\"input-due-date\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Line Items */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"text-line-items-title\">Line Items</h3>\n            <div className=\"space-y-4\">\n              {lineItems.map((item, index) => (\n                <div key={index} className=\"grid grid-cols-12 gap-4 items-end\" data-testid={`line-item-${index}`}>\n                  <div className=\"col-span-5\">\n                    <label className=\"text-sm font-medium\">Description</label>\n                    <Input\n                      placeholder=\"Item description\"\n                      value={item.description}\n                      onChange={(e) => updateLineItem(index, \"description\", e.target.value)}\n                      data-testid={`input-description-${index}`}\n                    />\n                  </div>\n                  <div className=\"col-span-2\">\n                    <label className=\"text-sm font-medium\">Quantity</label>\n                    <Input\n                      type=\"number\"\n                      min=\"0\"\n                      step=\"0.01\"\n                      value={item.quantity}\n                      onChange={(e) => updateLineItem(index, \"quantity\", e.target.value)}\n                      data-testid={`input-quantity-${index}`}\n                    />\n                  </div>\n                  <div className=\"col-span-2\">\n                    <label className=\"text-sm font-medium\">Rate</label>\n                    <Input\n                      type=\"number\"\n                      min=\"0\"\n                      step=\"0.01\"\n                      value={item.rate}\n                      onChange={(e) => updateLineItem(index, \"rate\", e.target.value)}\n                      data-testid={`input-rate-${index}`}\n                    />\n                  </div>\n                  <div className=\"col-span-2\">\n                    <label className=\"text-sm font-medium\">Amount</label>\n                    <div className=\"text-sm text-muted-foreground pt-2\" data-testid={`text-amount-${index}`}>\n                      ${parseFloat(item.amount || \"0\").toFixed(2)}\n                    </div>\n                  </div>\n                  <div className=\"col-span-1\">\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeLineItem(index)}\n                      disabled={lineItems.length === 1}\n                      data-testid={`button-remove-line-${index}`}\n                    >\n                      <Trash2 className=\"h-4 w-4 text-red-600\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={addLineItem}\n              className=\"mt-4\"\n              data-testid=\"button-add-line-item\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Line Item\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Totals */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-2 max-w-xs ml-auto\">\n              <div className=\"flex justify-between\">\n                <span>Subtotal:</span>\n                <span data-testid=\"text-subtotal\">${form.watch(\"subtotal\")}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Tax (10%):</span>\n                <span data-testid=\"text-tax\">${form.watch(\"taxAmount\")}</span>\n              </div>\n              <div className=\"flex justify-between font-semibold border-t pt-2\">\n                <span>Total:</span>\n                <span data-testid=\"text-total\">${form.watch(\"totalAmount\")}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Notes and Terms */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <FormField\n            control={form.control}\n            name=\"notes\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Notes</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Additional notes...\" {...field} data-testid=\"input-notes\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"terms\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Terms</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Payment terms...\" {...field} data-testid=\"input-terms\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Form Actions */}\n        <div className=\"flex justify-between items-center pt-6 border-t\">\n          <div className=\"space-x-2\">\n            <Button type=\"button\" variant=\"outline\" data-testid=\"button-save-draft\">\n              Save as Draft\n            </Button>\n            <Button type=\"button\" variant=\"outline\" data-testid=\"button-preview-pdf\">\n              Preview PDF\n            </Button>\n          </div>\n          <div className=\"space-x-2\">\n            <Button\n              type=\"submit\"\n              disabled={createInvoiceMutation.isPending}\n              data-testid=\"button-create-invoice-submit\"\n            >\n              {createInvoiceMutation.isPending ? \"Creating...\" : \"Create Invoice\"}\n            </Button>\n          </div>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":12792},"client/src/components/invoices/invoice-list.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { FileText, Eye, Download, Send, Edit, Trash2 } from \"lucide-react\";\n\ninterface InvoiceListProps {\n  invoices: any[];\n  isLoading: boolean;\n}\n\nexport default function InvoiceList({ invoices, isLoading }: InvoiceListProps) {\n  const getStatusVariant = (status: string) => {\n    switch (status) {\n      case \"paid\":\n        return \"default\";\n      case \"overdue\":\n        return \"destructive\";\n      case \"sent\":\n        return \"secondary\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(parseFloat(amount || '0'));\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle data-testid=\"text-invoices-list-title\">Invoices</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-3\" data-testid=\"loader-invoices-list\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\" data-testid=\"text-invoices-list-title\">\n          <FileText className=\"h-5 w-5\" />\n          Invoices ({invoices.length})\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Invoice #</TableHead>\n              <TableHead>Client</TableHead>\n              <TableHead>Issue Date</TableHead>\n              <TableHead>Due Date</TableHead>\n              <TableHead>Amount</TableHead>\n              <TableHead>Status</TableHead>\n              <TableHead className=\"text-right\">Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {invoices.map((invoice) => (\n              <TableRow key={invoice.id} data-testid={`row-invoice-${invoice.id}`}>\n                <TableCell>\n                  <div className=\"font-medium\" data-testid={`text-invoice-number-${invoice.id}`}>\n                    {invoice.invoiceNumber}\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div data-testid={`text-client-name-${invoice.id}`}>\n                    {invoice.client?.name || 'N/A'}\n                  </div>\n                  {invoice.client?.email && (\n                    <div className=\"text-sm text-muted-foreground\">\n                      {invoice.client.email}\n                    </div>\n                  )}\n                </TableCell>\n                <TableCell data-testid={`text-issue-date-${invoice.id}`}>\n                  {new Date(invoice.issueDate).toLocaleDateString()}\n                </TableCell>\n                <TableCell data-testid={`text-due-date-${invoice.id}`}>\n                  {new Date(invoice.dueDate).toLocaleDateString()}\n                </TableCell>\n                <TableCell>\n                  <div className=\"font-medium\" data-testid={`text-total-amount-${invoice.id}`}>\n                    {formatCurrency(invoice.totalAmount)}\n                  </div>\n                  {parseFloat(invoice.paidAmount || '0') > 0 && (\n                    <div className=\"text-sm text-muted-foreground\">\n                      Paid: {formatCurrency(invoice.paidAmount)}\n                    </div>\n                  )}\n                </TableCell>\n                <TableCell>\n                  <Badge\n                    variant={getStatusVariant(invoice.status)}\n                    data-testid={`badge-status-${invoice.id}`}\n                  >\n                    {invoice.status.charAt(0).toUpperCase() + invoice.status.slice(1)}\n                  </Badge>\n                </TableCell>\n                <TableCell className=\"text-right\">\n                  <div className=\"flex justify-end gap-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      data-testid={`button-view-${invoice.id}`}\n                    >\n                      <Eye className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      data-testid={`button-download-${invoice.id}`}\n                    >\n                      <Download className=\"h-4 w-4\" />\n                    </Button>\n                    {invoice.status === 'draft' && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        data-testid={`button-send-${invoice.id}`}\n                      >\n                        <Send className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      data-testid={`button-edit-${invoice.id}`}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      data-testid={`button-delete-${invoice.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4 text-red-600\" />\n                    </Button>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n            {invoices.length === 0 && (\n              <TableRow>\n                <TableCell colSpan={7} className=\"text-center py-8\" data-testid=\"text-no-invoices\">\n                  <FileText className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">No invoices found</p>\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6242},"client/src/components/layout/header.tsx":{"content":"import { Bell, Settings } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Header() {\n  return (\n    <header className=\"bg-card border-b border-border sticky top-0 z-50\">\n      <div className=\"px-6 py-4 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-chart-line text-primary-foreground text-sm\"></i>\n            </div>\n            <h1 className=\"text-xl font-bold text-foreground\">FinanceFlow</h1>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-notifications\">\n            <Bell className=\"h-4 w-4 text-muted-foreground\" />\n          </Button>\n          <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-settings\">\n            <Settings className=\"h-4 w-4 text-muted-foreground\" />\n          </Button>\n          <div className=\"flex items-center space-x-2 pl-4 border-l border-border\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-primary-foreground text-sm font-medium\" data-testid=\"text-user-initials\">JD</span>\n            </div>\n            <span className=\"text-sm font-medium\" data-testid=\"text-user-name\">John Doe</span>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1572},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  LayoutDashboard,\n  FileText,\n  Users,\n  Receipt,\n  ShoppingCart,\n  Truck,\n  University,\n  Scale,\n  CreditCard,\n  Wrench,\n  BarChart3,\n  List\n} from \"lucide-react\";\n\nconst navigationItems = [\n  {\n    title: \"Dashboard\",\n    href: \"/dashboard\",\n    icon: LayoutDashboard,\n    active: true\n  },\n  {\n    title: \"Sales\",\n    items: [\n      { title: \"Invoices\", href: \"/invoices\", icon: FileText },\n      { title: \"Clients\", href: \"/clients\", icon: Users },\n    ]\n  },\n  {\n    title: \"Purchases\",\n    items: [\n      { title: \"Bills\", href: \"/bills\", icon: Receipt },\n      { title: \"Purchase Orders\", href: \"/purchase-orders\", icon: ShoppingCart },\n      { title: \"Vendors\", href: \"/vendors\", icon: Truck },\n    ]\n  },\n  {\n    title: \"Banking\",\n    items: [\n      { title: \"Bank Feeds\", href: \"/bank-feeds\", icon: University },\n      { title: \"Reconciliation\", href: \"/bank-reconciliation\", icon: Scale },\n    ]\n  },\n  {\n    title: \"Expenses\",\n    items: [\n      { title: \"Expense Claims\", href: \"/expense-claims\", icon: CreditCard },\n      { title: \"Fixed Assets\", href: \"/fixed-assets\", icon: Wrench },\n    ]\n  },\n  {\n    title: \"Reports\",\n    items: [\n      { title: \"Financial Reports\", href: \"/reports\", icon: BarChart3 },\n      { title: \"Chart of Accounts\", href: \"/chart-of-accounts\", icon: List },\n    ]\n  }\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"w-64 bg-card border-r border-border flex-shrink-0\">\n      <nav className=\"p-4 space-y-2\">\n        <div className=\"space-y-1\">\n          {navigationItems.map((item, index) => {\n            if (item.href) {\n              // Single navigation item\n              const Icon = item.icon;\n              const isActive = location === item.href || (item.href === \"/dashboard\" && location === \"/\");\n              \n              return (\n                <Link key={index} href={item.href}>\n                  <a className={cn(\n                    \"flex items-center space-x-3 px-3 py-2 rounded-lg font-medium transition-colors\",\n                    isActive \n                      ? \"bg-primary text-primary-foreground\" \n                      : \"hover:bg-secondary text-muted-foreground\"\n                  )} data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}>\n                    <Icon className=\"h-4 w-4\" />\n                    <span>{item.title}</span>\n                  </a>\n                </Link>\n              );\n            } else {\n              // Navigation group\n              return (\n                <div key={index} className=\"pt-4\">\n                  <h3 className=\"px-3 text-xs font-semibold text-muted-foreground uppercase tracking-wider mb-2\">\n                    {item.title}\n                  </h3>\n                  {item.items?.map((subItem, subIndex) => {\n                    const Icon = subItem.icon;\n                    const isActive = location === subItem.href;\n                    \n                    return (\n                      <Link key={subIndex} href={subItem.href}>\n                        <a className={cn(\n                          \"flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors\",\n                          isActive \n                            ? \"bg-primary text-primary-foreground font-medium\" \n                            : \"hover:bg-secondary text-muted-foreground\"\n                        )} data-testid={`link-${subItem.title.toLowerCase().replace(' ', '-')}`}>\n                          <Icon className=\"h-4 w-4\" />\n                          <span>{subItem.title}</span>\n                        </a>\n                      </Link>\n                    );\n                  })}\n                </div>\n              );\n            }\n          })}\n        </div>\n      </nav>\n    </aside>\n  );\n}\n","size_bytes":3874},"client/src/components/purchase-orders/purchase-order-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst purchaseOrderSchema = z.object({\n  poNumber: z.string().min(1, \"PO number is required\"),\n  vendorId: z.string().min(1, \"Vendor is required\"),\n  orderDate: z.string().min(1, \"Order date is required\"),\n  expectedDate: z.string().optional(),\n  subtotal: z.string(),\n  taxAmount: z.string(),\n  totalAmount: z.string(),\n  notes: z.string().optional(),\n});\n\ninterface PurchaseOrderFormProps {\n  purchaseOrder?: any;\n  vendors: any[];\n  onSuccess: () => void;\n}\n\nexport default function PurchaseOrderForm({ purchaseOrder, vendors, onSuccess }: PurchaseOrderFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!purchaseOrder;\n\n  const form = useForm<z.infer<typeof purchaseOrderSchema>>({\n    resolver: zodResolver(purchaseOrderSchema),\n    defaultValues: {\n      poNumber: purchaseOrder?.poNumber || `PO-${Date.now()}`,\n      vendorId: purchaseOrder?.vendorId || \"\",\n      orderDate: purchaseOrder?.orderDate || \"\",\n      expectedDate: purchaseOrder?.expectedDate || \"\",\n      subtotal: purchaseOrder?.subtotal || \"0\",\n      taxAmount: purchaseOrder?.taxAmount || \"0\",\n      totalAmount: purchaseOrder?.totalAmount || \"0\",\n      notes: purchaseOrder?.notes || \"\",\n    },\n  });\n\n  const createPOMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof purchaseOrderSchema>) => {\n      const url = isEditing ? `/api/purchase-orders/${purchaseOrder.id}` : \"/api/purchase-orders\";\n      const method = isEditing ? \"PUT\" : \"POST\";\n      const response = await apiRequest(method, url, {\n        ...data,\n        status: \"pending\",\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: `Purchase order ${isEditing ? \"updated\" : \"created\"} successfully`,\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to ${isEditing ? \"update\" : \"create\"} purchase order`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof purchaseOrderSchema>) => {\n    createPOMutation.mutate(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Basic Information */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"poNumber\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>PO Number</FormLabel>\n                <FormControl>\n                  <Input {...field} data-testid=\"input-po-number\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"vendorId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Vendor *</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-vendor\">\n                      <SelectValue placeholder=\"Select a vendor\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {vendors.map((vendor) => (\n                      <SelectItem key={vendor.id} value={vendor.id}>\n                        {vendor.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"orderDate\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Order Date *</FormLabel>\n                <FormControl>\n                  <Input type=\"date\" {...field} data-testid=\"input-order-date\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"expectedDate\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Expected Delivery Date</FormLabel>\n                <FormControl>\n                  <Input type=\"date\" {...field} data-testid=\"input-expected-date\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Line Items Placeholder */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"text-line-items-title\">Line Items</h3>\n            <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n              <p className=\"text-sm text-muted-foreground\">Line items functionality will be implemented</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Totals */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"subtotal\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Subtotal</FormLabel>\n                <FormControl>\n                  <Input type=\"number\" min=\"0\" step=\"0.01\" {...field} data-testid=\"input-subtotal\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"taxAmount\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Tax Amount</FormLabel>\n                <FormControl>\n                  <Input type=\"number\" min=\"0\" step=\"0.01\" {...field} data-testid=\"input-tax-amount\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"totalAmount\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Total Amount</FormLabel>\n                <FormControl>\n                  <Input type=\"number\" min=\"0\" step=\"0.01\" {...field} data-testid=\"input-total-amount\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"notes\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Notes</FormLabel>\n              <FormControl>\n                <Textarea placeholder=\"Additional notes...\" {...field} data-testid=\"textarea-notes\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Form Actions */}\n        <div className=\"flex justify-end space-x-2\">\n          <Button\n            type=\"submit\"\n            disabled={createPOMutation.isPending}\n            data-testid=\"button-save-purchase-order\"\n          >\n            {createPOMutation.isPending ? \"Saving...\" : isEditing ? \"Update Purchase Order\" : \"Create Purchase Order\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":7976},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/vendors/vendor-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst vendorSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Valid email is required\").optional().or(z.literal(\"\")),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n  city: z.string().optional(),\n  state: z.string().optional(),\n  zipCode: z.string().optional(),\n  country: z.string().optional(),\n  taxId: z.string().optional(),\n  paymentTerms: z.number().min(0).default(30),\n  isActive: z.boolean().default(true),\n});\n\ninterface VendorFormProps {\n  vendor?: any;\n  onSuccess: () => void;\n}\n\nexport default function VendorForm({ vendor, onSuccess }: VendorFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!vendor;\n\n  const form = useForm<z.infer<typeof vendorSchema>>({\n    resolver: zodResolver(vendorSchema),\n    defaultValues: {\n      name: vendor?.name || \"\",\n      email: vendor?.email || \"\",\n      phone: vendor?.phone || \"\",\n      address: vendor?.address || \"\",\n      city: vendor?.city || \"\",\n      state: vendor?.state || \"\",\n      zipCode: vendor?.zipCode || \"\",\n      country: vendor?.country || \"\",\n      taxId: vendor?.taxId || \"\",\n      paymentTerms: vendor?.paymentTerms || 30,\n      isActive: vendor?.isActive ?? true,\n    },\n  });\n\n  const vendorMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof vendorSchema>) => {\n      const url = isEditing ? `/api/vendors/${vendor.id}` : \"/api/vendors\";\n      const method = isEditing ? \"PUT\" : \"POST\";\n      const response = await apiRequest(method, url, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: `Vendor ${isEditing ? \"updated\" : \"created\"} successfully`,\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to ${isEditing ? \"update\" : \"create\"} vendor`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof vendorSchema>) => {\n    vendorMutation.mutate(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Basic Information */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Company Name *</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"ABC Supplies Inc.\" {...field} data-testid=\"input-vendor-name\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"taxId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Tax ID</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"12-3456789\" {...field} data-testid=\"input-tax-id\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Contact Information */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email</FormLabel>\n                <FormControl>\n                  <Input type=\"email\" placeholder=\"orders@supplier.com\" {...field} data-testid=\"input-email\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"phone\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Phone</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"+1 (555) 123-4567\" {...field} data-testid=\"input-phone\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Address Information */}\n        <FormField\n          control={form.control}\n          name=\"address\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Address</FormLabel>\n              <FormControl>\n                <Input placeholder=\"456 Supplier Avenue\" {...field} data-testid=\"input-address\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"city\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>City</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Chicago\" {...field} data-testid=\"input-city\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"state\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>State/Province</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"IL\" {...field} data-testid=\"input-state\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"zipCode\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>ZIP/Postal Code</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"60601\" {...field} data-testid=\"input-zip\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"country\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Country</FormLabel>\n              <FormControl>\n                <Input placeholder=\"United States\" {...field} data-testid=\"input-country\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Business Settings */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"paymentTerms\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Payment Terms (days)</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"number\" \n                    min=\"0\" \n                    {...field} \n                    onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                    data-testid=\"input-payment-terms\" \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"isActive\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n                <div className=\"space-y-0.5\">\n                  <FormLabel>Active Status</FormLabel>\n                  <div className=\"text-sm text-muted-foreground\">\n                    Enable this vendor for new transactions\n                  </div>\n                </div>\n                <FormControl>\n                  <Switch\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    data-testid=\"switch-active-status\"\n                  />\n                </FormControl>\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Form Actions */}\n        <div className=\"flex justify-end space-x-2\">\n          <Button\n            type=\"submit\"\n            disabled={vendorMutation.isPending}\n            data-testid=\"button-save-vendor\"\n          >\n            {vendorMutation.isPending ? \"Saving...\" : isEditing ? \"Update Vendor\" : \"Create Vendor\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":8842}},"version":1}